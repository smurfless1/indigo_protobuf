# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: proto/indigo_influx.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime
from typing import AsyncGenerator, Optional

import betterproto
import grpclib


@dataclass
class InfluxTag(betterproto.Message):
    name: Optional[str] = betterproto.message_field(1, wraps=betterproto.TYPE_STRING)
    folder: Optional[str] = betterproto.message_field(2, wraps=betterproto.TYPE_STRING)


@dataclass
class InfluxEvent(betterproto.Message):
    measurement: Optional[str] = betterproto.message_field(
        1, wraps=betterproto.TYPE_STRING
    )
    time: datetime = betterproto.message_field(2)
    tags: "InfluxTag" = betterproto.message_field(3)
    fields: "InfluxFields" = betterproto.message_field(4)


@dataclass
class InfluxFields(betterproto.Message):
    on: Optional[bool] = betterproto.message_field(1, wraps=betterproto.TYPE_BOOL)
    brightness: Optional[float] = betterproto.message_field(
        11, wraps=betterproto.TYPE_FLOAT
    )
    cool_setpoint: Optional[float] = betterproto.message_field(
        20, wraps=betterproto.TYPE_FLOAT
    )
    heat_setpoint: Optional[float] = betterproto.message_field(
        21, wraps=betterproto.TYPE_FLOAT
    )
    temperature: Optional[float] = betterproto.message_field(
        22, wraps=betterproto.TYPE_FLOAT
    )
    humidity: Optional[float] = betterproto.message_field(
        23, wraps=betterproto.TYPE_FLOAT
    )


@dataclass
class SubscribeArgs(betterproto.Message):
    multicast_port: int = betterproto.uint32_field(1)


class InfluxTranslatorStub(betterproto.ServiceStub):
    async def influx_subscribe(
        self, *, multicast_port: int = 0
    ) -> AsyncGenerator[InfluxEvent, None]:
        request = SubscribeArgs()
        request.multicast_port = multicast_port

        async for response in self._unary_stream(
            "/indigo_influx.InfluxTranslator/InfluxSubscribe", request, InfluxEvent,
        ):
            yield response
