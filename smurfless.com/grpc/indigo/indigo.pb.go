// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/indigo.proto

package indigo

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DeviceChange struct {
	Name                 *wrappers.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *DeviceChange) Reset()         { *m = DeviceChange{} }
func (m *DeviceChange) String() string { return proto.CompactTextString(m) }
func (*DeviceChange) ProtoMessage()    {}
func (*DeviceChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_16d2a71fc1c15683, []int{0}
}

func (m *DeviceChange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceChange.Unmarshal(m, b)
}
func (m *DeviceChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceChange.Marshal(b, m, deterministic)
}
func (m *DeviceChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceChange.Merge(m, src)
}
func (m *DeviceChange) XXX_Size() int {
	return xxx_messageInfo_DeviceChange.Size(m)
}
func (m *DeviceChange) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceChange.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceChange proto.InternalMessageInfo

func (m *DeviceChange) GetName() *wrappers.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

type IndigoEvent struct {
	Measurement          *wrappers.StringValue `protobuf:"bytes,1,opt,name=measurement,proto3" json:"measurement,omitempty"`
	Time                 *timestamp.Timestamp  `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"`
	Tags                 *IndigoTags           `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	Fields               *IndigoFields         `protobuf:"bytes,4,opt,name=fields,proto3" json:"fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *IndigoEvent) Reset()         { *m = IndigoEvent{} }
func (m *IndigoEvent) String() string { return proto.CompactTextString(m) }
func (*IndigoEvent) ProtoMessage()    {}
func (*IndigoEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_16d2a71fc1c15683, []int{1}
}

func (m *IndigoEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IndigoEvent.Unmarshal(m, b)
}
func (m *IndigoEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IndigoEvent.Marshal(b, m, deterministic)
}
func (m *IndigoEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndigoEvent.Merge(m, src)
}
func (m *IndigoEvent) XXX_Size() int {
	return xxx_messageInfo_IndigoEvent.Size(m)
}
func (m *IndigoEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_IndigoEvent.DiscardUnknown(m)
}

var xxx_messageInfo_IndigoEvent proto.InternalMessageInfo

func (m *IndigoEvent) GetMeasurement() *wrappers.StringValue {
	if m != nil {
		return m.Measurement
	}
	return nil
}

func (m *IndigoEvent) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *IndigoEvent) GetTags() *IndigoTags {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *IndigoEvent) GetFields() *IndigoFields {
	if m != nil {
		return m.Fields
	}
	return nil
}

type IndigoFields struct {
	Name                   *wrappers.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	LastChanged            *wrappers.FloatValue  `protobuf:"bytes,2,opt,name=lastChanged,proto3" json:"lastChanged,omitempty"`
	LastSuccessfulComm     *wrappers.FloatValue  `protobuf:"bytes,3,opt,name=lastSuccessfulComm,proto3" json:"lastSuccessfulComm,omitempty"`
	Id                     *wrappers.FloatValue  `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Brightness             *wrappers.FloatValue  `protobuf:"bytes,10,opt,name=brightness,proto3" json:"brightness,omitempty"`
	OnState                *wrappers.BoolValue   `protobuf:"bytes,11,opt,name=onState,proto3" json:"onState,omitempty"`
	StateOnOffState        *wrappers.BoolValue   `protobuf:"bytes,12,opt,name=state_onOffState,json=stateOnOffState,proto3" json:"state_onOffState,omitempty"`
	OnStateNum             *wrappers.FloatValue  `protobuf:"bytes,13,opt,name=onState_num,json=onStateNum,proto3" json:"onState_num,omitempty"`
	StateHumidityInput1    *wrappers.FloatValue  `protobuf:"bytes,21,opt,name=state_humidityInput1,json=stateHumidityInput1,proto3" json:"state_humidityInput1,omitempty"`
	CoolSetpoint           *wrappers.FloatValue  `protobuf:"bytes,22,opt,name=coolSetpoint,proto3" json:"coolSetpoint,omitempty"`
	CoolIsOn               *wrappers.BoolValue   `protobuf:"bytes,23,opt,name=coolIsOn,proto3" json:"coolIsOn,omitempty"`
	CoolIsOnNum            *wrappers.FloatValue  `protobuf:"bytes,24,opt,name=coolIsOn_num,json=coolIsOnNum,proto3" json:"coolIsOn_num,omitempty"`
	HeatSetpoint           *wrappers.FloatValue  `protobuf:"bytes,25,opt,name=heatSetpoint,proto3" json:"heatSetpoint,omitempty"`
	HeatIsOn               *wrappers.BoolValue   `protobuf:"bytes,26,opt,name=heatIsOn,proto3" json:"heatIsOn,omitempty"`
	HeatIsOnNum            *wrappers.FloatValue  `protobuf:"bytes,27,opt,name=heatIsOn_num,json=heatIsOnNum,proto3" json:"heatIsOn_num,omitempty"`
	StateTemperatureInput1 *wrappers.FloatValue  `protobuf:"bytes,29,opt,name=state_temperatureInput1,json=stateTemperatureInput1,proto3" json:"state_temperatureInput1,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}              `json:"-"`
	XXX_unrecognized       []byte                `json:"-"`
	XXX_sizecache          int32                 `json:"-"`
}

func (m *IndigoFields) Reset()         { *m = IndigoFields{} }
func (m *IndigoFields) String() string { return proto.CompactTextString(m) }
func (*IndigoFields) ProtoMessage()    {}
func (*IndigoFields) Descriptor() ([]byte, []int) {
	return fileDescriptor_16d2a71fc1c15683, []int{2}
}

func (m *IndigoFields) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IndigoFields.Unmarshal(m, b)
}
func (m *IndigoFields) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IndigoFields.Marshal(b, m, deterministic)
}
func (m *IndigoFields) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndigoFields.Merge(m, src)
}
func (m *IndigoFields) XXX_Size() int {
	return xxx_messageInfo_IndigoFields.Size(m)
}
func (m *IndigoFields) XXX_DiscardUnknown() {
	xxx_messageInfo_IndigoFields.DiscardUnknown(m)
}

var xxx_messageInfo_IndigoFields proto.InternalMessageInfo

func (m *IndigoFields) GetName() *wrappers.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *IndigoFields) GetLastChanged() *wrappers.FloatValue {
	if m != nil {
		return m.LastChanged
	}
	return nil
}

func (m *IndigoFields) GetLastSuccessfulComm() *wrappers.FloatValue {
	if m != nil {
		return m.LastSuccessfulComm
	}
	return nil
}

func (m *IndigoFields) GetId() *wrappers.FloatValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *IndigoFields) GetBrightness() *wrappers.FloatValue {
	if m != nil {
		return m.Brightness
	}
	return nil
}

func (m *IndigoFields) GetOnState() *wrappers.BoolValue {
	if m != nil {
		return m.OnState
	}
	return nil
}

func (m *IndigoFields) GetStateOnOffState() *wrappers.BoolValue {
	if m != nil {
		return m.StateOnOffState
	}
	return nil
}

func (m *IndigoFields) GetOnStateNum() *wrappers.FloatValue {
	if m != nil {
		return m.OnStateNum
	}
	return nil
}

func (m *IndigoFields) GetStateHumidityInput1() *wrappers.FloatValue {
	if m != nil {
		return m.StateHumidityInput1
	}
	return nil
}

func (m *IndigoFields) GetCoolSetpoint() *wrappers.FloatValue {
	if m != nil {
		return m.CoolSetpoint
	}
	return nil
}

func (m *IndigoFields) GetCoolIsOn() *wrappers.BoolValue {
	if m != nil {
		return m.CoolIsOn
	}
	return nil
}

func (m *IndigoFields) GetCoolIsOnNum() *wrappers.FloatValue {
	if m != nil {
		return m.CoolIsOnNum
	}
	return nil
}

func (m *IndigoFields) GetHeatSetpoint() *wrappers.FloatValue {
	if m != nil {
		return m.HeatSetpoint
	}
	return nil
}

func (m *IndigoFields) GetHeatIsOn() *wrappers.BoolValue {
	if m != nil {
		return m.HeatIsOn
	}
	return nil
}

func (m *IndigoFields) GetHeatIsOnNum() *wrappers.FloatValue {
	if m != nil {
		return m.HeatIsOnNum
	}
	return nil
}

func (m *IndigoFields) GetStateTemperatureInput1() *wrappers.FloatValue {
	if m != nil {
		return m.StateTemperatureInput1
	}
	return nil
}

type IndigoTags struct {
	Name                 *wrappers.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Folder               *wrappers.StringValue `protobuf:"bytes,2,opt,name=folder,proto3" json:"folder,omitempty"`
	FolderId             *wrappers.StringValue `protobuf:"bytes,3,opt,name=folderId,proto3" json:"folderId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *IndigoTags) Reset()         { *m = IndigoTags{} }
func (m *IndigoTags) String() string { return proto.CompactTextString(m) }
func (*IndigoTags) ProtoMessage()    {}
func (*IndigoTags) Descriptor() ([]byte, []int) {
	return fileDescriptor_16d2a71fc1c15683, []int{3}
}

func (m *IndigoTags) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IndigoTags.Unmarshal(m, b)
}
func (m *IndigoTags) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IndigoTags.Marshal(b, m, deterministic)
}
func (m *IndigoTags) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndigoTags.Merge(m, src)
}
func (m *IndigoTags) XXX_Size() int {
	return xxx_messageInfo_IndigoTags.Size(m)
}
func (m *IndigoTags) XXX_DiscardUnknown() {
	xxx_messageInfo_IndigoTags.DiscardUnknown(m)
}

var xxx_messageInfo_IndigoTags proto.InternalMessageInfo

func (m *IndigoTags) GetName() *wrappers.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *IndigoTags) GetFolder() *wrappers.StringValue {
	if m != nil {
		return m.Folder
	}
	return nil
}

func (m *IndigoTags) GetFolderId() *wrappers.StringValue {
	if m != nil {
		return m.FolderId
	}
	return nil
}

type HvacFields struct {
	DehumidifierIsOnNum                    *wrappers.FloatValue  `protobuf:"bytes,1,opt,name=dehumidifierIsOn_num,json=dehumidifierIsOnNum,proto3" json:"dehumidifierIsOn_num,omitempty"`
	SupportsCoolSetpointNum                *wrappers.FloatValue  `protobuf:"bytes,2,opt,name=supportsCoolSetpoint_num,json=supportsCoolSetpointNum,proto3" json:"supportsCoolSetpoint_num,omitempty"`
	StateHvacOperationModeIsOff            *wrappers.BoolValue   `protobuf:"bytes,3,opt,name=state_hvacOperationModeIsOff,json=stateHvacOperationModeIsOff,proto3" json:"state_hvacOperationModeIsOff,omitempty"`
	StateHvacHeaterIsOn                    *wrappers.BoolValue   `protobuf:"bytes,4,opt,name=state_hvacHeaterIsOn,json=stateHvacHeaterIsOn,proto3" json:"state_hvacHeaterIsOn,omitempty"`
	PluginId                               *wrappers.StringValue `protobuf:"bytes,5,opt,name=pluginId,proto3" json:"pluginId,omitempty"`
	LastSuccessfulComm                     *wrappers.FloatValue  `protobuf:"bytes,6,opt,name=lastSuccessfulComm,proto3" json:"lastSuccessfulComm,omitempty"`
	Protocol                               *wrappers.StringValue `protobuf:"bytes,7,opt,name=protocol,proto3" json:"protocol,omitempty"`
	StateHvacFanIsOn                       *wrappers.BoolValue   `protobuf:"bytes,8,opt,name=state_hvacFanIsOn,json=stateHvacFanIsOn,proto3" json:"state_hvacFanIsOn,omitempty"`
	ErrorState                             *wrappers.StringValue `protobuf:"bytes,9,opt,name=errorState,proto3" json:"errorState,omitempty"`
	StateHvacDehumidifierIsOnNum           *wrappers.FloatValue  `protobuf:"bytes,10,opt,name=state_hvacDehumidifierIsOn_num,json=stateHvacDehumidifierIsOnNum,proto3" json:"state_hvacDehumidifierIsOn_num,omitempty"`
	StateHumidityInputsAll                 *wrappers.StringValue `protobuf:"bytes,11,opt,name=state_humidityInputsAll,json=stateHumidityInputsAll,proto3" json:"state_humidityInputsAll,omitempty"`
	StateHvacOperationModeUi               *wrappers.StringValue `protobuf:"bytes,12,opt,name=state_hvacOperationMode_ui,json=stateHvacOperationModeUi,proto3" json:"state_hvacOperationMode_ui,omitempty"`
	StateHvacFanModeIsAlwaysOn             *wrappers.BoolValue   `protobuf:"bytes,13,opt,name=state_hvacFanModeIsAlwaysOn,json=stateHvacFanModeIsAlwaysOn,proto3" json:"state_hvacFanModeIsAlwaysOn,omitempty"`
	HvacMode                               *wrappers.FloatValue  `protobuf:"bytes,14,opt,name=hvacMode,proto3" json:"hvacMode,omitempty"`
	StateHvacCoolerIsOnNum                 *wrappers.FloatValue  `protobuf:"bytes,15,opt,name=state_hvacCoolerIsOn_num,json=stateHvacCoolerIsOnNum,proto3" json:"state_hvacCoolerIsOn_num,omitempty"`
	StateHvacOperationModeNum              *wrappers.FloatValue  `protobuf:"bytes,16,opt,name=state_hvacOperationMode_num,json=stateHvacOperationModeNum,proto3" json:"state_hvacOperationMode_num,omitempty"`
	TemperatureSensorCountNum              *wrappers.FloatValue  `protobuf:"bytes,17,opt,name=temperatureSensorCount_num,json=temperatureSensorCountNum,proto3" json:"temperatureSensorCount_num,omitempty"`
	StateHvacOperationModeIsHeat           *wrappers.BoolValue   `protobuf:"bytes,18,opt,name=state_hvacOperationModeIsHeat,json=stateHvacOperationModeIsHeat,proto3" json:"state_hvacOperationModeIsHeat,omitempty"`
	StateSetpointHeat                      *wrappers.FloatValue  `protobuf:"bytes,19,opt,name=state_setpointHeat,json=stateSetpointHeat,proto3" json:"state_setpointHeat,omitempty"`
	StateHvacOperationModeIsOffNum         *wrappers.FloatValue  `protobuf:"bytes,20,opt,name=state_hvacOperationModeIsOff_num,json=stateHvacOperationModeIsOffNum,proto3" json:"state_hvacOperationModeIsOff_num,omitempty"`
	Name                                   *wrappers.StringValue `protobuf:"bytes,21,opt,name=name,proto3" json:"name,omitempty"`
	StateTemperatureInput1                 *wrappers.FloatValue  `protobuf:"bytes,22,opt,name=state_temperatureInput1,json=stateTemperatureInput1,proto3" json:"state_temperatureInput1,omitempty"`
	HumidifierIsOnNum                      *wrappers.FloatValue  `protobuf:"bytes,23,opt,name=humidifierIsOn_num,json=humidifierIsOnNum,proto3" json:"humidifierIsOn_num,omitempty"`
	StateHvacFanModeIsAuto                 *wrappers.BoolValue   `protobuf:"bytes,24,opt,name=state_hvacFanModeIsAuto,json=stateHvacFanModeIsAuto,proto3" json:"state_hvacFanModeIsAuto,omitempty"`
	SupportsAllOffNum                      *wrappers.FloatValue  `protobuf:"bytes,25,opt,name=supportsAllOff_num,json=supportsAllOffNum,proto3" json:"supportsAllOff_num,omitempty"`
	EnabledNum                             *wrappers.FloatValue  `protobuf:"bytes,26,opt,name=enabled_num,json=enabledNum,proto3" json:"enabled_num,omitempty"`
	FanIsOnNum                             *wrappers.FloatValue  `protobuf:"bytes,27,opt,name=fanIsOn_num,json=fanIsOnNum,proto3" json:"fanIsOn_num,omitempty"`
	StateHvacOperationModeIsProgramHeat    *wrappers.BoolValue   `protobuf:"bytes,28,opt,name=state_hvacOperationModeIsProgramHeat,json=stateHvacOperationModeIsProgramHeat,proto3" json:"state_hvacOperationModeIsProgramHeat,omitempty"`
	Configured                             *wrappers.BoolValue   `protobuf:"bytes,29,opt,name=configured,proto3" json:"configured,omitempty"`
	StateHvacOperationModeIsHeatNum        *wrappers.FloatValue  `protobuf:"bytes,30,opt,name=state_hvacOperationModeIsHeat_num,json=stateHvacOperationModeIsHeatNum,proto3" json:"state_hvacOperationModeIsHeat_num,omitempty"`
	RemoteDisplayNum                       *wrappers.FloatValue  `protobuf:"bytes,31,opt,name=remoteDisplay_num,json=remoteDisplayNum,proto3" json:"remoteDisplay_num,omitempty"`
	ButtonGroupCountNum                    *wrappers.FloatValue  `protobuf:"bytes,32,opt,name=buttonGroupCount_num,json=buttonGroupCountNum,proto3" json:"buttonGroupCount_num,omitempty"`
	CoolIsOnNum                            *wrappers.FloatValue  `protobuf:"bytes,33,opt,name=coolIsOn_num,json=coolIsOnNum,proto3" json:"coolIsOn_num,omitempty"`
	StateHvacOperationModeIsProgramCool    *wrappers.BoolValue   `protobuf:"bytes,34,opt,name=state_hvacOperationModeIsProgramCool,json=stateHvacOperationModeIsProgramCool,proto3" json:"state_hvacOperationModeIsProgramCool,omitempty"`
	DisplayStateValUi                      *wrappers.StringValue `protobuf:"bytes,35,opt,name=displayStateValUi,proto3" json:"displayStateValUi,omitempty"`
	HvacModeNum                            *wrappers.FloatValue  `protobuf:"bytes,36,opt,name=hvacMode_num,json=hvacModeNum,proto3" json:"hvacMode_num,omitempty"`
	CoolSetpoint                           *wrappers.FloatValue  `protobuf:"bytes,37,opt,name=coolSetpoint,proto3" json:"coolSetpoint,omitempty"`
	StateHvacDehumidifierIsOn              *wrappers.BoolValue   `protobuf:"bytes,38,opt,name=state_hvacDehumidifierIsOn,json=stateHvacDehumidifierIsOn,proto3" json:"state_hvacDehumidifierIsOn,omitempty"`
	StateHvacOperationModeIsProgramAuto    *wrappers.BoolValue   `protobuf:"bytes,39,opt,name=state_hvacOperationModeIsProgramAuto,json=stateHvacOperationModeIsProgramAuto,proto3" json:"state_hvacOperationModeIsProgramAuto,omitempty"`
	Version                                *wrappers.FloatValue  `protobuf:"bytes,40,opt,name=version,proto3" json:"version,omitempty"`
	DisplayStateId                         *wrappers.StringValue `protobuf:"bytes,41,opt,name=displayStateId,proto3" json:"displayStateId,omitempty"`
	FanModeNum                             *wrappers.FloatValue  `protobuf:"bytes,42,opt,name=fanMode_num,json=fanModeNum,proto3" json:"fanMode_num,omitempty"`
	StateHvacFanMode                       *wrappers.FloatValue  `protobuf:"bytes,43,opt,name=state_hvacFanMode,json=stateHvacFanMode,proto3" json:"state_hvacFanMode,omitempty"`
	SupportsHvacFanMode                    *wrappers.BoolValue   `protobuf:"bytes,44,opt,name=supportsHvacFanMode,proto3" json:"supportsHvacFanMode,omitempty"`
	SupportsAllLightsOnOffNum              *wrappers.FloatValue  `protobuf:"bytes,45,opt,name=supportsAllLightsOnOff_num,json=supportsAllLightsOnOffNum,proto3" json:"supportsAllLightsOnOff_num,omitempty"`
	HumiditySensorCountNum                 *wrappers.FloatValue  `protobuf:"bytes,46,opt,name=humiditySensorCount_num,json=humiditySensorCountNum,proto3" json:"humiditySensorCount_num,omitempty"`
	Address                                *wrappers.StringValue `protobuf:"bytes,47,opt,name=address,proto3" json:"address,omitempty"`
	IdNum                                  *wrappers.FloatValue  `protobuf:"bytes,48,opt,name=id_num,json=idNum,proto3" json:"id_num,omitempty"`
	SupportsCoolSetpoint                   *wrappers.BoolValue   `protobuf:"bytes,49,opt,name=supportsCoolSetpoint,proto3" json:"supportsCoolSetpoint,omitempty"`
	StateHvacFanModeNum                    *wrappers.FloatValue  `protobuf:"bytes,50,opt,name=state_hvacFanMode_num,json=stateHvacFanModeNum,proto3" json:"state_hvacFanMode_num,omitempty"`
	LastChanged                            *wrappers.FloatValue  `protobuf:"bytes,51,opt,name=lastChanged,proto3" json:"lastChanged,omitempty"`
	VersionNum                             *wrappers.FloatValue  `protobuf:"bytes,52,opt,name=version_num,json=versionNum,proto3" json:"version_num,omitempty"`
	DisplayStateImageSel                   *wrappers.StringValue `protobuf:"bytes,53,opt,name=displayStateImageSel,proto3" json:"displayStateImageSel,omitempty"`
	StateHvacFanModeIsAutoNum              *wrappers.FloatValue  `protobuf:"bytes,54,opt,name=state_hvacFanModeIsAuto_num,json=stateHvacFanModeIsAutoNum,proto3" json:"state_hvacFanModeIsAuto_num,omitempty"`
	DisplayStateValRaw                     *wrappers.StringValue `protobuf:"bytes,55,opt,name=displayStateValRaw,proto3" json:"displayStateValRaw,omitempty"`
	FanIsOn                                *wrappers.BoolValue   `protobuf:"bytes,56,opt,name=fanIsOn,proto3" json:"fanIsOn,omitempty"`
	HumiditySensorCount                    *wrappers.FloatValue  `protobuf:"bytes,57,opt,name=humiditySensorCount,proto3" json:"humiditySensorCount,omitempty"`
	StateHumidityInputsAllNum              *wrappers.FloatValue  `protobuf:"bytes,58,opt,name=state_humidityInputsAll_num,json=stateHumidityInputsAllNum,proto3" json:"state_humidityInputsAll_num,omitempty"`
	StateTemperatureInputsAll              *wrappers.StringValue `protobuf:"bytes,59,opt,name=state_temperatureInputsAll,json=stateTemperatureInputsAll,proto3" json:"state_temperatureInputsAll,omitempty"`
	SubModel                               *wrappers.StringValue `protobuf:"bytes,60,opt,name=subModel,proto3" json:"subModel,omitempty"`
	SupportsAllOff                         *wrappers.BoolValue   `protobuf:"bytes,61,opt,name=supportsAllOff,proto3" json:"supportsAllOff,omitempty"`
	StateHvacOperationModeIsProgramAutoNum *wrappers.FloatValue  `protobuf:"bytes,62,opt,name=state_hvacOperationModeIsProgramAuto_num,json=stateHvacOperationModeIsProgramAutoNum,proto3" json:"state_hvacOperationModeIsProgramAuto_num,omitempty"`
	StateHvacOperationMode                 *wrappers.FloatValue  `protobuf:"bytes,63,opt,name=state_hvacOperationMode,json=stateHvacOperationMode,proto3" json:"state_hvacOperationMode,omitempty"`
	TemperatureSensorCount                 *wrappers.FloatValue  `protobuf:"bytes,64,opt,name=temperatureSensorCount,proto3" json:"temperatureSensorCount,omitempty"`
	SupportsStatusRequest                  *wrappers.BoolValue   `protobuf:"bytes,65,opt,name=supportsStatusRequest,proto3" json:"supportsStatusRequest,omitempty"`
	SupportsHeatSetpointNum                *wrappers.FloatValue  `protobuf:"bytes,66,opt,name=supportsHeatSetpoint_num,json=supportsHeatSetpointNum,proto3" json:"supportsHeatSetpoint_num,omitempty"`
	SupportsHvacFanModeNum                 *wrappers.FloatValue  `protobuf:"bytes,67,opt,name=supportsHvacFanMode_num,json=supportsHvacFanModeNum,proto3" json:"supportsHvacFanMode_num,omitempty"`
	StateHvacFanModeIsAlwaysOnNum          *wrappers.FloatValue  `protobuf:"bytes,68,opt,name=state_hvacFanModeIsAlwaysOn_num,json=stateHvacFanModeIsAlwaysOnNum,proto3" json:"state_hvacFanModeIsAlwaysOn_num,omitempty"`
	HeatIsOnNum                            *wrappers.FloatValue  `protobuf:"bytes,69,opt,name=heatIsOn_num,json=heatIsOnNum,proto3" json:"heatIsOn_num,omitempty"`
	FolderId                               *wrappers.FloatValue  `protobuf:"bytes,70,opt,name=folderId,proto3" json:"folderId,omitempty"`
	SupportsHeatSetpoint                   *wrappers.BoolValue   `protobuf:"bytes,71,opt,name=supportsHeatSetpoint,proto3" json:"supportsHeatSetpoint,omitempty"`
	HumidifierIsOn                         *wrappers.BoolValue   `protobuf:"bytes,72,opt,name=humidifierIsOn,proto3" json:"humidifierIsOn,omitempty"`
	SupportsStatusRequestNum               *wrappers.FloatValue  `protobuf:"bytes,73,opt,name=supportsStatusRequest_num,json=supportsStatusRequestNum,proto3" json:"supportsStatusRequest_num,omitempty"`
	Enabled                                *wrappers.BoolValue   `protobuf:"bytes,74,opt,name=enabled,proto3" json:"enabled,omitempty"`
	StateHvacFanModeUi                     *wrappers.StringValue `protobuf:"bytes,75,opt,name=state_hvacFanMode_ui,json=stateHvacFanModeUi,proto3" json:"state_hvacFanMode_ui,omitempty"`
	RemoteDisplay                          *wrappers.BoolValue   `protobuf:"bytes,76,opt,name=remoteDisplay,proto3" json:"remoteDisplay,omitempty"`
	SupportsAllLightsOnOff                 *wrappers.BoolValue   `protobuf:"bytes,77,opt,name=supportsAllLightsOnOff,proto3" json:"supportsAllLightsOnOff,omitempty"`
	StateHvacHumidifierIsOnNum             *wrappers.FloatValue  `protobuf:"bytes,78,opt,name=state_hvacHumidifierIsOn_num,json=stateHvacHumidifierIsOnNum,proto3" json:"state_hvacHumidifierIsOn_num,omitempty"`
	StateHvacOperationModeIsCoolNum        *wrappers.FloatValue  `protobuf:"bytes,79,opt,name=state_hvacOperationModeIsCool_num,json=stateHvacOperationModeIsCoolNum,proto3" json:"state_hvacOperationModeIsCool_num,omitempty"`
	StateHvacHumidifierIsOn                *wrappers.BoolValue   `protobuf:"bytes,80,opt,name=state_hvacHumidifierIsOn,json=stateHvacHumidifierIsOn,proto3" json:"state_hvacHumidifierIsOn,omitempty"`
	StateHvacOperationModeIsProgramCoolNum *wrappers.FloatValue  `protobuf:"bytes,81,opt,name=state_hvacOperationModeIsProgramCool_num,json=stateHvacOperationModeIsProgramCoolNum,proto3" json:"state_hvacOperationModeIsProgramCool_num,omitempty"`
	HeatIsOn                               *wrappers.BoolValue   `protobuf:"bytes,82,opt,name=heatIsOn,proto3" json:"heatIsOn,omitempty"`
	StateHvacOperationModeIsCool           *wrappers.BoolValue   `protobuf:"bytes,83,opt,name=state_hvacOperationModeIsCool,json=stateHvacOperationModeIsCool,proto3" json:"state_hvacOperationModeIsCool,omitempty"`
	ButtonGroupCount                       *wrappers.FloatValue  `protobuf:"bytes,84,opt,name=buttonGroupCount,proto3" json:"buttonGroupCount,omitempty"`
	Id                                     *wrappers.FloatValue  `protobuf:"bytes,85,opt,name=id,proto3" json:"id,omitempty"`
	StateHvacOperationModeIsAuto           *wrappers.BoolValue   `protobuf:"bytes,86,opt,name=state_hvacOperationModeIsAuto,json=stateHvacOperationModeIsAuto,proto3" json:"state_hvacOperationModeIsAuto,omitempty"`
	StateSetpointCool                      *wrappers.FloatValue  `protobuf:"bytes,87,opt,name=state_setpointCool,json=stateSetpointCool,proto3" json:"state_setpointCool,omitempty"`
	DeviceTypeId                           *wrappers.StringValue `protobuf:"bytes,88,opt,name=deviceTypeId,proto3" json:"deviceTypeId,omitempty"`
	ConfiguredNum                          *wrappers.FloatValue  `protobuf:"bytes,89,opt,name=configured_num,json=configuredNum,proto3" json:"configured_num,omitempty"`
	DehumidifierIsOn                       *wrappers.BoolValue   `protobuf:"bytes,90,opt,name=dehumidifierIsOn,proto3" json:"dehumidifierIsOn,omitempty"`
	StateHvacOperationModeIsAutoNum        *wrappers.FloatValue  `protobuf:"bytes,91,opt,name=state_hvacOperationModeIsAuto_num,json=stateHvacOperationModeIsAutoNum,proto3" json:"state_hvacOperationModeIsAuto_num,omitempty"`
	FolderIdNum                            *wrappers.FloatValue  `protobuf:"bytes,92,opt,name=folderId_num,json=folderIdNum,proto3" json:"folderId_num,omitempty"`
	SupportsHvacOperationMode              *wrappers.BoolValue   `protobuf:"bytes,93,opt,name=supportsHvacOperationMode,proto3" json:"supportsHvacOperationMode,omitempty"`
	StateHvacHeaterIsOnNum                 *wrappers.FloatValue  `protobuf:"bytes,94,opt,name=state_hvacHeaterIsOn_num,json=stateHvacHeaterIsOnNum,proto3" json:"state_hvacHeaterIsOn_num,omitempty"`
	Description                            *wrappers.StringValue `protobuf:"bytes,95,opt,name=description,proto3" json:"description,omitempty"`
	StateTemperatureInputsAllNum           *wrappers.FloatValue  `protobuf:"bytes,96,opt,name=state_temperatureInputsAll_num,json=stateTemperatureInputsAllNum,proto3" json:"state_temperatureInputsAll_num,omitempty"`
	SupportsHvacOperationModeNum           *wrappers.FloatValue  `protobuf:"bytes,97,opt,name=supportsHvacOperationMode_num,json=supportsHvacOperationModeNum,proto3" json:"supportsHvacOperationMode_num,omitempty"`
	StateHvacOperationModeIsProgramHeatNum *wrappers.FloatValue  `protobuf:"bytes,98,opt,name=state_hvacOperationModeIsProgramHeat_num,json=stateHvacOperationModeIsProgramHeatNum,proto3" json:"state_hvacOperationModeIsProgramHeat_num,omitempty"`
	CoolIsOn                               *wrappers.BoolValue   `protobuf:"bytes,99,opt,name=coolIsOn,proto3" json:"coolIsOn,omitempty"`
	HeatSetpoint                           *wrappers.FloatValue  `protobuf:"bytes,100,opt,name=heatSetpoint,proto3" json:"heatSetpoint,omitempty"`
	FanMode                                *wrappers.FloatValue  `protobuf:"bytes,101,opt,name=fanMode,proto3" json:"fanMode,omitempty"`
	StateHvacCoolerIsOn                    *wrappers.BoolValue   `protobuf:"bytes,102,opt,name=state_hvacCoolerIsOn,json=stateHvacCoolerIsOn,proto3" json:"state_hvacCoolerIsOn,omitempty"`
	StateHumidityInput1                    *wrappers.FloatValue  `protobuf:"bytes,103,opt,name=state_humidityInput1,json=stateHumidityInput1,proto3" json:"state_humidityInput1,omitempty"`
	StateHvacFanIsOnNum                    *wrappers.FloatValue  `protobuf:"bytes,104,opt,name=state_hvacFanIsOn_num,json=stateHvacFanIsOnNum,proto3" json:"state_hvacFanIsOn_num,omitempty"`
	Model                                  *wrappers.StringValue `protobuf:"bytes,105,opt,name=model,proto3" json:"model,omitempty"`
	XXX_NoUnkeyedLiteral                   struct{}              `json:"-"`
	XXX_unrecognized                       []byte                `json:"-"`
	XXX_sizecache                          int32                 `json:"-"`
}

func (m *HvacFields) Reset()         { *m = HvacFields{} }
func (m *HvacFields) String() string { return proto.CompactTextString(m) }
func (*HvacFields) ProtoMessage()    {}
func (*HvacFields) Descriptor() ([]byte, []int) {
	return fileDescriptor_16d2a71fc1c15683, []int{4}
}

func (m *HvacFields) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HvacFields.Unmarshal(m, b)
}
func (m *HvacFields) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HvacFields.Marshal(b, m, deterministic)
}
func (m *HvacFields) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HvacFields.Merge(m, src)
}
func (m *HvacFields) XXX_Size() int {
	return xxx_messageInfo_HvacFields.Size(m)
}
func (m *HvacFields) XXX_DiscardUnknown() {
	xxx_messageInfo_HvacFields.DiscardUnknown(m)
}

var xxx_messageInfo_HvacFields proto.InternalMessageInfo

func (m *HvacFields) GetDehumidifierIsOnNum() *wrappers.FloatValue {
	if m != nil {
		return m.DehumidifierIsOnNum
	}
	return nil
}

func (m *HvacFields) GetSupportsCoolSetpointNum() *wrappers.FloatValue {
	if m != nil {
		return m.SupportsCoolSetpointNum
	}
	return nil
}

func (m *HvacFields) GetStateHvacOperationModeIsOff() *wrappers.BoolValue {
	if m != nil {
		return m.StateHvacOperationModeIsOff
	}
	return nil
}

func (m *HvacFields) GetStateHvacHeaterIsOn() *wrappers.BoolValue {
	if m != nil {
		return m.StateHvacHeaterIsOn
	}
	return nil
}

func (m *HvacFields) GetPluginId() *wrappers.StringValue {
	if m != nil {
		return m.PluginId
	}
	return nil
}

func (m *HvacFields) GetLastSuccessfulComm() *wrappers.FloatValue {
	if m != nil {
		return m.LastSuccessfulComm
	}
	return nil
}

func (m *HvacFields) GetProtocol() *wrappers.StringValue {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (m *HvacFields) GetStateHvacFanIsOn() *wrappers.BoolValue {
	if m != nil {
		return m.StateHvacFanIsOn
	}
	return nil
}

func (m *HvacFields) GetErrorState() *wrappers.StringValue {
	if m != nil {
		return m.ErrorState
	}
	return nil
}

func (m *HvacFields) GetStateHvacDehumidifierIsOnNum() *wrappers.FloatValue {
	if m != nil {
		return m.StateHvacDehumidifierIsOnNum
	}
	return nil
}

func (m *HvacFields) GetStateHumidityInputsAll() *wrappers.StringValue {
	if m != nil {
		return m.StateHumidityInputsAll
	}
	return nil
}

func (m *HvacFields) GetStateHvacOperationModeUi() *wrappers.StringValue {
	if m != nil {
		return m.StateHvacOperationModeUi
	}
	return nil
}

func (m *HvacFields) GetStateHvacFanModeIsAlwaysOn() *wrappers.BoolValue {
	if m != nil {
		return m.StateHvacFanModeIsAlwaysOn
	}
	return nil
}

func (m *HvacFields) GetHvacMode() *wrappers.FloatValue {
	if m != nil {
		return m.HvacMode
	}
	return nil
}

func (m *HvacFields) GetStateHvacCoolerIsOnNum() *wrappers.FloatValue {
	if m != nil {
		return m.StateHvacCoolerIsOnNum
	}
	return nil
}

func (m *HvacFields) GetStateHvacOperationModeNum() *wrappers.FloatValue {
	if m != nil {
		return m.StateHvacOperationModeNum
	}
	return nil
}

func (m *HvacFields) GetTemperatureSensorCountNum() *wrappers.FloatValue {
	if m != nil {
		return m.TemperatureSensorCountNum
	}
	return nil
}

func (m *HvacFields) GetStateHvacOperationModeIsHeat() *wrappers.BoolValue {
	if m != nil {
		return m.StateHvacOperationModeIsHeat
	}
	return nil
}

func (m *HvacFields) GetStateSetpointHeat() *wrappers.FloatValue {
	if m != nil {
		return m.StateSetpointHeat
	}
	return nil
}

func (m *HvacFields) GetStateHvacOperationModeIsOffNum() *wrappers.FloatValue {
	if m != nil {
		return m.StateHvacOperationModeIsOffNum
	}
	return nil
}

func (m *HvacFields) GetName() *wrappers.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *HvacFields) GetStateTemperatureInput1() *wrappers.FloatValue {
	if m != nil {
		return m.StateTemperatureInput1
	}
	return nil
}

func (m *HvacFields) GetHumidifierIsOnNum() *wrappers.FloatValue {
	if m != nil {
		return m.HumidifierIsOnNum
	}
	return nil
}

func (m *HvacFields) GetStateHvacFanModeIsAuto() *wrappers.BoolValue {
	if m != nil {
		return m.StateHvacFanModeIsAuto
	}
	return nil
}

func (m *HvacFields) GetSupportsAllOffNum() *wrappers.FloatValue {
	if m != nil {
		return m.SupportsAllOffNum
	}
	return nil
}

func (m *HvacFields) GetEnabledNum() *wrappers.FloatValue {
	if m != nil {
		return m.EnabledNum
	}
	return nil
}

func (m *HvacFields) GetFanIsOnNum() *wrappers.FloatValue {
	if m != nil {
		return m.FanIsOnNum
	}
	return nil
}

func (m *HvacFields) GetStateHvacOperationModeIsProgramHeat() *wrappers.BoolValue {
	if m != nil {
		return m.StateHvacOperationModeIsProgramHeat
	}
	return nil
}

func (m *HvacFields) GetConfigured() *wrappers.BoolValue {
	if m != nil {
		return m.Configured
	}
	return nil
}

func (m *HvacFields) GetStateHvacOperationModeIsHeatNum() *wrappers.FloatValue {
	if m != nil {
		return m.StateHvacOperationModeIsHeatNum
	}
	return nil
}

func (m *HvacFields) GetRemoteDisplayNum() *wrappers.FloatValue {
	if m != nil {
		return m.RemoteDisplayNum
	}
	return nil
}

func (m *HvacFields) GetButtonGroupCountNum() *wrappers.FloatValue {
	if m != nil {
		return m.ButtonGroupCountNum
	}
	return nil
}

func (m *HvacFields) GetCoolIsOnNum() *wrappers.FloatValue {
	if m != nil {
		return m.CoolIsOnNum
	}
	return nil
}

func (m *HvacFields) GetStateHvacOperationModeIsProgramCool() *wrappers.BoolValue {
	if m != nil {
		return m.StateHvacOperationModeIsProgramCool
	}
	return nil
}

func (m *HvacFields) GetDisplayStateValUi() *wrappers.StringValue {
	if m != nil {
		return m.DisplayStateValUi
	}
	return nil
}

func (m *HvacFields) GetHvacModeNum() *wrappers.FloatValue {
	if m != nil {
		return m.HvacModeNum
	}
	return nil
}

func (m *HvacFields) GetCoolSetpoint() *wrappers.FloatValue {
	if m != nil {
		return m.CoolSetpoint
	}
	return nil
}

func (m *HvacFields) GetStateHvacDehumidifierIsOn() *wrappers.BoolValue {
	if m != nil {
		return m.StateHvacDehumidifierIsOn
	}
	return nil
}

func (m *HvacFields) GetStateHvacOperationModeIsProgramAuto() *wrappers.BoolValue {
	if m != nil {
		return m.StateHvacOperationModeIsProgramAuto
	}
	return nil
}

func (m *HvacFields) GetVersion() *wrappers.FloatValue {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *HvacFields) GetDisplayStateId() *wrappers.StringValue {
	if m != nil {
		return m.DisplayStateId
	}
	return nil
}

func (m *HvacFields) GetFanModeNum() *wrappers.FloatValue {
	if m != nil {
		return m.FanModeNum
	}
	return nil
}

func (m *HvacFields) GetStateHvacFanMode() *wrappers.FloatValue {
	if m != nil {
		return m.StateHvacFanMode
	}
	return nil
}

func (m *HvacFields) GetSupportsHvacFanMode() *wrappers.BoolValue {
	if m != nil {
		return m.SupportsHvacFanMode
	}
	return nil
}

func (m *HvacFields) GetSupportsAllLightsOnOffNum() *wrappers.FloatValue {
	if m != nil {
		return m.SupportsAllLightsOnOffNum
	}
	return nil
}

func (m *HvacFields) GetHumiditySensorCountNum() *wrappers.FloatValue {
	if m != nil {
		return m.HumiditySensorCountNum
	}
	return nil
}

func (m *HvacFields) GetAddress() *wrappers.StringValue {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *HvacFields) GetIdNum() *wrappers.FloatValue {
	if m != nil {
		return m.IdNum
	}
	return nil
}

func (m *HvacFields) GetSupportsCoolSetpoint() *wrappers.BoolValue {
	if m != nil {
		return m.SupportsCoolSetpoint
	}
	return nil
}

func (m *HvacFields) GetStateHvacFanModeNum() *wrappers.FloatValue {
	if m != nil {
		return m.StateHvacFanModeNum
	}
	return nil
}

func (m *HvacFields) GetLastChanged() *wrappers.FloatValue {
	if m != nil {
		return m.LastChanged
	}
	return nil
}

func (m *HvacFields) GetVersionNum() *wrappers.FloatValue {
	if m != nil {
		return m.VersionNum
	}
	return nil
}

func (m *HvacFields) GetDisplayStateImageSel() *wrappers.StringValue {
	if m != nil {
		return m.DisplayStateImageSel
	}
	return nil
}

func (m *HvacFields) GetStateHvacFanModeIsAutoNum() *wrappers.FloatValue {
	if m != nil {
		return m.StateHvacFanModeIsAutoNum
	}
	return nil
}

func (m *HvacFields) GetDisplayStateValRaw() *wrappers.StringValue {
	if m != nil {
		return m.DisplayStateValRaw
	}
	return nil
}

func (m *HvacFields) GetFanIsOn() *wrappers.BoolValue {
	if m != nil {
		return m.FanIsOn
	}
	return nil
}

func (m *HvacFields) GetHumiditySensorCount() *wrappers.FloatValue {
	if m != nil {
		return m.HumiditySensorCount
	}
	return nil
}

func (m *HvacFields) GetStateHumidityInputsAllNum() *wrappers.FloatValue {
	if m != nil {
		return m.StateHumidityInputsAllNum
	}
	return nil
}

func (m *HvacFields) GetStateTemperatureInputsAll() *wrappers.StringValue {
	if m != nil {
		return m.StateTemperatureInputsAll
	}
	return nil
}

func (m *HvacFields) GetSubModel() *wrappers.StringValue {
	if m != nil {
		return m.SubModel
	}
	return nil
}

func (m *HvacFields) GetSupportsAllOff() *wrappers.BoolValue {
	if m != nil {
		return m.SupportsAllOff
	}
	return nil
}

func (m *HvacFields) GetStateHvacOperationModeIsProgramAutoNum() *wrappers.FloatValue {
	if m != nil {
		return m.StateHvacOperationModeIsProgramAutoNum
	}
	return nil
}

func (m *HvacFields) GetStateHvacOperationMode() *wrappers.FloatValue {
	if m != nil {
		return m.StateHvacOperationMode
	}
	return nil
}

func (m *HvacFields) GetTemperatureSensorCount() *wrappers.FloatValue {
	if m != nil {
		return m.TemperatureSensorCount
	}
	return nil
}

func (m *HvacFields) GetSupportsStatusRequest() *wrappers.BoolValue {
	if m != nil {
		return m.SupportsStatusRequest
	}
	return nil
}

func (m *HvacFields) GetSupportsHeatSetpointNum() *wrappers.FloatValue {
	if m != nil {
		return m.SupportsHeatSetpointNum
	}
	return nil
}

func (m *HvacFields) GetSupportsHvacFanModeNum() *wrappers.FloatValue {
	if m != nil {
		return m.SupportsHvacFanModeNum
	}
	return nil
}

func (m *HvacFields) GetStateHvacFanModeIsAlwaysOnNum() *wrappers.FloatValue {
	if m != nil {
		return m.StateHvacFanModeIsAlwaysOnNum
	}
	return nil
}

func (m *HvacFields) GetHeatIsOnNum() *wrappers.FloatValue {
	if m != nil {
		return m.HeatIsOnNum
	}
	return nil
}

func (m *HvacFields) GetFolderId() *wrappers.FloatValue {
	if m != nil {
		return m.FolderId
	}
	return nil
}

func (m *HvacFields) GetSupportsHeatSetpoint() *wrappers.BoolValue {
	if m != nil {
		return m.SupportsHeatSetpoint
	}
	return nil
}

func (m *HvacFields) GetHumidifierIsOn() *wrappers.BoolValue {
	if m != nil {
		return m.HumidifierIsOn
	}
	return nil
}

func (m *HvacFields) GetSupportsStatusRequestNum() *wrappers.FloatValue {
	if m != nil {
		return m.SupportsStatusRequestNum
	}
	return nil
}

func (m *HvacFields) GetEnabled() *wrappers.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *HvacFields) GetStateHvacFanModeUi() *wrappers.StringValue {
	if m != nil {
		return m.StateHvacFanModeUi
	}
	return nil
}

func (m *HvacFields) GetRemoteDisplay() *wrappers.BoolValue {
	if m != nil {
		return m.RemoteDisplay
	}
	return nil
}

func (m *HvacFields) GetSupportsAllLightsOnOff() *wrappers.BoolValue {
	if m != nil {
		return m.SupportsAllLightsOnOff
	}
	return nil
}

func (m *HvacFields) GetStateHvacHumidifierIsOnNum() *wrappers.FloatValue {
	if m != nil {
		return m.StateHvacHumidifierIsOnNum
	}
	return nil
}

func (m *HvacFields) GetStateHvacOperationModeIsCoolNum() *wrappers.FloatValue {
	if m != nil {
		return m.StateHvacOperationModeIsCoolNum
	}
	return nil
}

func (m *HvacFields) GetStateHvacHumidifierIsOn() *wrappers.BoolValue {
	if m != nil {
		return m.StateHvacHumidifierIsOn
	}
	return nil
}

func (m *HvacFields) GetStateHvacOperationModeIsProgramCoolNum() *wrappers.FloatValue {
	if m != nil {
		return m.StateHvacOperationModeIsProgramCoolNum
	}
	return nil
}

func (m *HvacFields) GetHeatIsOn() *wrappers.BoolValue {
	if m != nil {
		return m.HeatIsOn
	}
	return nil
}

func (m *HvacFields) GetStateHvacOperationModeIsCool() *wrappers.BoolValue {
	if m != nil {
		return m.StateHvacOperationModeIsCool
	}
	return nil
}

func (m *HvacFields) GetButtonGroupCount() *wrappers.FloatValue {
	if m != nil {
		return m.ButtonGroupCount
	}
	return nil
}

func (m *HvacFields) GetId() *wrappers.FloatValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *HvacFields) GetStateHvacOperationModeIsAuto() *wrappers.BoolValue {
	if m != nil {
		return m.StateHvacOperationModeIsAuto
	}
	return nil
}

func (m *HvacFields) GetStateSetpointCool() *wrappers.FloatValue {
	if m != nil {
		return m.StateSetpointCool
	}
	return nil
}

func (m *HvacFields) GetDeviceTypeId() *wrappers.StringValue {
	if m != nil {
		return m.DeviceTypeId
	}
	return nil
}

func (m *HvacFields) GetConfiguredNum() *wrappers.FloatValue {
	if m != nil {
		return m.ConfiguredNum
	}
	return nil
}

func (m *HvacFields) GetDehumidifierIsOn() *wrappers.BoolValue {
	if m != nil {
		return m.DehumidifierIsOn
	}
	return nil
}

func (m *HvacFields) GetStateHvacOperationModeIsAutoNum() *wrappers.FloatValue {
	if m != nil {
		return m.StateHvacOperationModeIsAutoNum
	}
	return nil
}

func (m *HvacFields) GetFolderIdNum() *wrappers.FloatValue {
	if m != nil {
		return m.FolderIdNum
	}
	return nil
}

func (m *HvacFields) GetSupportsHvacOperationMode() *wrappers.BoolValue {
	if m != nil {
		return m.SupportsHvacOperationMode
	}
	return nil
}

func (m *HvacFields) GetStateHvacHeaterIsOnNum() *wrappers.FloatValue {
	if m != nil {
		return m.StateHvacHeaterIsOnNum
	}
	return nil
}

func (m *HvacFields) GetDescription() *wrappers.StringValue {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *HvacFields) GetStateTemperatureInputsAllNum() *wrappers.FloatValue {
	if m != nil {
		return m.StateTemperatureInputsAllNum
	}
	return nil
}

func (m *HvacFields) GetSupportsHvacOperationModeNum() *wrappers.FloatValue {
	if m != nil {
		return m.SupportsHvacOperationModeNum
	}
	return nil
}

func (m *HvacFields) GetStateHvacOperationModeIsProgramHeatNum() *wrappers.FloatValue {
	if m != nil {
		return m.StateHvacOperationModeIsProgramHeatNum
	}
	return nil
}

func (m *HvacFields) GetCoolIsOn() *wrappers.BoolValue {
	if m != nil {
		return m.CoolIsOn
	}
	return nil
}

func (m *HvacFields) GetHeatSetpoint() *wrappers.FloatValue {
	if m != nil {
		return m.HeatSetpoint
	}
	return nil
}

func (m *HvacFields) GetFanMode() *wrappers.FloatValue {
	if m != nil {
		return m.FanMode
	}
	return nil
}

func (m *HvacFields) GetStateHvacCoolerIsOn() *wrappers.BoolValue {
	if m != nil {
		return m.StateHvacCoolerIsOn
	}
	return nil
}

func (m *HvacFields) GetStateHumidityInput1() *wrappers.FloatValue {
	if m != nil {
		return m.StateHumidityInput1
	}
	return nil
}

func (m *HvacFields) GetStateHvacFanIsOnNum() *wrappers.FloatValue {
	if m != nil {
		return m.StateHvacFanIsOnNum
	}
	return nil
}

func (m *HvacFields) GetModel() *wrappers.StringValue {
	if m != nil {
		return m.Model
	}
	return nil
}

type BinarySwitchFields struct {
	SubModel                  *wrappers.StringValue `protobuf:"bytes,1,opt,name=subModel,proto3" json:"subModel,omitempty"`
	Protocol                  *wrappers.StringValue `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Configured                *wrappers.BoolValue   `protobuf:"bytes,3,opt,name=configured,proto3" json:"configured,omitempty"`
	ButtonConfiguredCountNum  *wrappers.FloatValue  `protobuf:"bytes,4,opt,name=buttonConfiguredCount_num,json=buttonConfiguredCountNum,proto3" json:"buttonConfiguredCount_num,omitempty"`
	PluginId                  *wrappers.StringValue `protobuf:"bytes,5,opt,name=pluginId,proto3" json:"pluginId,omitempty"`
	ButtonGroupCountNum       *wrappers.FloatValue  `protobuf:"bytes,6,opt,name=buttonGroupCount_num,json=buttonGroupCountNum,proto3" json:"buttonGroupCount_num,omitempty"`
	LastSuccessfulComm        *wrappers.FloatValue  `protobuf:"bytes,7,opt,name=lastSuccessfulComm,proto3" json:"lastSuccessfulComm,omitempty"`
	ButtonGroupCount          *wrappers.FloatValue  `protobuf:"bytes,8,opt,name=buttonGroupCount,proto3" json:"buttonGroupCount,omitempty"`
	Id                        *wrappers.FloatValue  `protobuf:"bytes,9,opt,name=id,proto3" json:"id,omitempty"`
	OnStateNum                *wrappers.FloatValue  `protobuf:"bytes,10,opt,name=onState_num,json=onStateNum,proto3" json:"onState_num,omitempty"`
	SupportsAllOff            *wrappers.BoolValue   `protobuf:"bytes,11,opt,name=supportsAllOff,proto3" json:"supportsAllOff,omitempty"`
	ErrorState                *wrappers.StringValue `protobuf:"bytes,12,opt,name=errorState,proto3" json:"errorState,omitempty"`
	RemoteDisplay             *wrappers.BoolValue   `protobuf:"bytes,13,opt,name=remoteDisplay,proto3" json:"remoteDisplay,omitempty"`
	ConfiguredNum             *wrappers.FloatValue  `protobuf:"bytes,14,opt,name=configured_num,json=configuredNum,proto3" json:"configured_num,omitempty"`
	SupportsAllLightsOnOff    *wrappers.BoolValue   `protobuf:"bytes,15,opt,name=supportsAllLightsOnOff,proto3" json:"supportsAllLightsOnOff,omitempty"`
	DisplayStateValUi         *wrappers.StringValue `protobuf:"bytes,16,opt,name=displayStateValUi,proto3" json:"displayStateValUi,omitempty"`
	Version                   *wrappers.FloatValue  `protobuf:"bytes,17,opt,name=version,proto3" json:"version,omitempty"`
	DisplayStateId            *wrappers.StringValue `protobuf:"bytes,18,opt,name=displayStateId,proto3" json:"displayStateId,omitempty"`
	StateOnOffState           *wrappers.BoolValue   `protobuf:"bytes,19,opt,name=state_onOffState,json=stateOnOffState,proto3" json:"state_onOffState,omitempty"`
	SupportsStatusRequest     *wrappers.BoolValue   `protobuf:"bytes,20,opt,name=supportsStatusRequest,proto3" json:"supportsStatusRequest,omitempty"`
	FolderIdNum               *wrappers.FloatValue  `protobuf:"bytes,21,opt,name=folderId_num,json=folderIdNum,proto3" json:"folderId_num,omitempty"`
	RemoteDisplayNum          *wrappers.FloatValue  `protobuf:"bytes,22,opt,name=remoteDisplay_num,json=remoteDisplayNum,proto3" json:"remoteDisplay_num,omitempty"`
	Description               *wrappers.StringValue `protobuf:"bytes,23,opt,name=description,proto3" json:"description,omitempty"`
	OnState                   *wrappers.BoolValue   `protobuf:"bytes,24,opt,name=onState,proto3" json:"onState,omitempty"`
	SupportsAllLightsOnOffNum *wrappers.FloatValue  `protobuf:"bytes,25,opt,name=supportsAllLightsOnOff_num,json=supportsAllLightsOnOffNum,proto3" json:"supportsAllLightsOnOff_num,omitempty"`
	Address                   *wrappers.StringValue `protobuf:"bytes,26,opt,name=address,proto3" json:"address,omitempty"`
	FolderId                  *wrappers.FloatValue  `protobuf:"bytes,27,opt,name=folderId,proto3" json:"folderId,omitempty"`
	IdNum                     *wrappers.FloatValue  `protobuf:"bytes,28,opt,name=id_num,json=idNum,proto3" json:"id_num,omitempty"`
	ButtonConfiguredCount     *wrappers.FloatValue  `protobuf:"bytes,29,opt,name=buttonConfiguredCount,proto3" json:"buttonConfiguredCount,omitempty"`
	Name                      *wrappers.StringValue `protobuf:"bytes,30,opt,name=name,proto3" json:"name,omitempty"`
	SupportsStatusRequestNum  *wrappers.FloatValue  `protobuf:"bytes,31,opt,name=supportsStatusRequest_num,json=supportsStatusRequestNum,proto3" json:"supportsStatusRequest_num,omitempty"`
	LastChanged               *wrappers.FloatValue  `protobuf:"bytes,32,opt,name=lastChanged,proto3" json:"lastChanged,omitempty"`
	StateOnOffStateNum        *wrappers.FloatValue  `protobuf:"bytes,33,opt,name=state_onOffState_num,json=stateOnOffStateNum,proto3" json:"state_onOffState_num,omitempty"`
	VersionNum                *wrappers.FloatValue  `protobuf:"bytes,34,opt,name=version_num,json=versionNum,proto3" json:"version_num,omitempty"`
	Enabled                   *wrappers.BoolValue   `protobuf:"bytes,35,opt,name=enabled,proto3" json:"enabled,omitempty"`
	SupportsAllOffNum         *wrappers.FloatValue  `protobuf:"bytes,36,opt,name=supportsAllOff_num,json=supportsAllOffNum,proto3" json:"supportsAllOff_num,omitempty"`
	DeviceTypeId              *wrappers.StringValue `protobuf:"bytes,37,opt,name=deviceTypeId,proto3" json:"deviceTypeId,omitempty"`
	EnabledNum                *wrappers.FloatValue  `protobuf:"bytes,38,opt,name=enabled_num,json=enabledNum,proto3" json:"enabled_num,omitempty"`
	DisplayStateImageSel      *wrappers.StringValue `protobuf:"bytes,39,opt,name=displayStateImageSel,proto3" json:"displayStateImageSel,omitempty"`
	DisplayStateValRaw        *wrappers.StringValue `protobuf:"bytes,40,opt,name=displayStateValRaw,proto3" json:"displayStateValRaw,omitempty"`
	Model                     *wrappers.StringValue `protobuf:"bytes,41,opt,name=model,proto3" json:"model,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}              `json:"-"`
	XXX_unrecognized          []byte                `json:"-"`
	XXX_sizecache             int32                 `json:"-"`
}

func (m *BinarySwitchFields) Reset()         { *m = BinarySwitchFields{} }
func (m *BinarySwitchFields) String() string { return proto.CompactTextString(m) }
func (*BinarySwitchFields) ProtoMessage()    {}
func (*BinarySwitchFields) Descriptor() ([]byte, []int) {
	return fileDescriptor_16d2a71fc1c15683, []int{5}
}

func (m *BinarySwitchFields) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BinarySwitchFields.Unmarshal(m, b)
}
func (m *BinarySwitchFields) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BinarySwitchFields.Marshal(b, m, deterministic)
}
func (m *BinarySwitchFields) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BinarySwitchFields.Merge(m, src)
}
func (m *BinarySwitchFields) XXX_Size() int {
	return xxx_messageInfo_BinarySwitchFields.Size(m)
}
func (m *BinarySwitchFields) XXX_DiscardUnknown() {
	xxx_messageInfo_BinarySwitchFields.DiscardUnknown(m)
}

var xxx_messageInfo_BinarySwitchFields proto.InternalMessageInfo

func (m *BinarySwitchFields) GetSubModel() *wrappers.StringValue {
	if m != nil {
		return m.SubModel
	}
	return nil
}

func (m *BinarySwitchFields) GetProtocol() *wrappers.StringValue {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (m *BinarySwitchFields) GetConfigured() *wrappers.BoolValue {
	if m != nil {
		return m.Configured
	}
	return nil
}

func (m *BinarySwitchFields) GetButtonConfiguredCountNum() *wrappers.FloatValue {
	if m != nil {
		return m.ButtonConfiguredCountNum
	}
	return nil
}

func (m *BinarySwitchFields) GetPluginId() *wrappers.StringValue {
	if m != nil {
		return m.PluginId
	}
	return nil
}

func (m *BinarySwitchFields) GetButtonGroupCountNum() *wrappers.FloatValue {
	if m != nil {
		return m.ButtonGroupCountNum
	}
	return nil
}

func (m *BinarySwitchFields) GetLastSuccessfulComm() *wrappers.FloatValue {
	if m != nil {
		return m.LastSuccessfulComm
	}
	return nil
}

func (m *BinarySwitchFields) GetButtonGroupCount() *wrappers.FloatValue {
	if m != nil {
		return m.ButtonGroupCount
	}
	return nil
}

func (m *BinarySwitchFields) GetId() *wrappers.FloatValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *BinarySwitchFields) GetOnStateNum() *wrappers.FloatValue {
	if m != nil {
		return m.OnStateNum
	}
	return nil
}

func (m *BinarySwitchFields) GetSupportsAllOff() *wrappers.BoolValue {
	if m != nil {
		return m.SupportsAllOff
	}
	return nil
}

func (m *BinarySwitchFields) GetErrorState() *wrappers.StringValue {
	if m != nil {
		return m.ErrorState
	}
	return nil
}

func (m *BinarySwitchFields) GetRemoteDisplay() *wrappers.BoolValue {
	if m != nil {
		return m.RemoteDisplay
	}
	return nil
}

func (m *BinarySwitchFields) GetConfiguredNum() *wrappers.FloatValue {
	if m != nil {
		return m.ConfiguredNum
	}
	return nil
}

func (m *BinarySwitchFields) GetSupportsAllLightsOnOff() *wrappers.BoolValue {
	if m != nil {
		return m.SupportsAllLightsOnOff
	}
	return nil
}

func (m *BinarySwitchFields) GetDisplayStateValUi() *wrappers.StringValue {
	if m != nil {
		return m.DisplayStateValUi
	}
	return nil
}

func (m *BinarySwitchFields) GetVersion() *wrappers.FloatValue {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *BinarySwitchFields) GetDisplayStateId() *wrappers.StringValue {
	if m != nil {
		return m.DisplayStateId
	}
	return nil
}

func (m *BinarySwitchFields) GetStateOnOffState() *wrappers.BoolValue {
	if m != nil {
		return m.StateOnOffState
	}
	return nil
}

func (m *BinarySwitchFields) GetSupportsStatusRequest() *wrappers.BoolValue {
	if m != nil {
		return m.SupportsStatusRequest
	}
	return nil
}

func (m *BinarySwitchFields) GetFolderIdNum() *wrappers.FloatValue {
	if m != nil {
		return m.FolderIdNum
	}
	return nil
}

func (m *BinarySwitchFields) GetRemoteDisplayNum() *wrappers.FloatValue {
	if m != nil {
		return m.RemoteDisplayNum
	}
	return nil
}

func (m *BinarySwitchFields) GetDescription() *wrappers.StringValue {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *BinarySwitchFields) GetOnState() *wrappers.BoolValue {
	if m != nil {
		return m.OnState
	}
	return nil
}

func (m *BinarySwitchFields) GetSupportsAllLightsOnOffNum() *wrappers.FloatValue {
	if m != nil {
		return m.SupportsAllLightsOnOffNum
	}
	return nil
}

func (m *BinarySwitchFields) GetAddress() *wrappers.StringValue {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *BinarySwitchFields) GetFolderId() *wrappers.FloatValue {
	if m != nil {
		return m.FolderId
	}
	return nil
}

func (m *BinarySwitchFields) GetIdNum() *wrappers.FloatValue {
	if m != nil {
		return m.IdNum
	}
	return nil
}

func (m *BinarySwitchFields) GetButtonConfiguredCount() *wrappers.FloatValue {
	if m != nil {
		return m.ButtonConfiguredCount
	}
	return nil
}

func (m *BinarySwitchFields) GetName() *wrappers.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *BinarySwitchFields) GetSupportsStatusRequestNum() *wrappers.FloatValue {
	if m != nil {
		return m.SupportsStatusRequestNum
	}
	return nil
}

func (m *BinarySwitchFields) GetLastChanged() *wrappers.FloatValue {
	if m != nil {
		return m.LastChanged
	}
	return nil
}

func (m *BinarySwitchFields) GetStateOnOffStateNum() *wrappers.FloatValue {
	if m != nil {
		return m.StateOnOffStateNum
	}
	return nil
}

func (m *BinarySwitchFields) GetVersionNum() *wrappers.FloatValue {
	if m != nil {
		return m.VersionNum
	}
	return nil
}

func (m *BinarySwitchFields) GetEnabled() *wrappers.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *BinarySwitchFields) GetSupportsAllOffNum() *wrappers.FloatValue {
	if m != nil {
		return m.SupportsAllOffNum
	}
	return nil
}

func (m *BinarySwitchFields) GetDeviceTypeId() *wrappers.StringValue {
	if m != nil {
		return m.DeviceTypeId
	}
	return nil
}

func (m *BinarySwitchFields) GetEnabledNum() *wrappers.FloatValue {
	if m != nil {
		return m.EnabledNum
	}
	return nil
}

func (m *BinarySwitchFields) GetDisplayStateImageSel() *wrappers.StringValue {
	if m != nil {
		return m.DisplayStateImageSel
	}
	return nil
}

func (m *BinarySwitchFields) GetDisplayStateValRaw() *wrappers.StringValue {
	if m != nil {
		return m.DisplayStateValRaw
	}
	return nil
}

func (m *BinarySwitchFields) GetModel() *wrappers.StringValue {
	if m != nil {
		return m.Model
	}
	return nil
}

type SecurityFields struct {
	SubModel                  *wrappers.StringValue `protobuf:"bytes,1,opt,name=subModel,proto3" json:"subModel,omitempty"`
	Protocol                  *wrappers.StringValue `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	StateBypassNobypass       *wrappers.BoolValue   `protobuf:"bytes,3,opt,name=state_bypass_nobypass,json=stateBypassNobypass,proto3" json:"state_bypass_nobypass,omitempty"`
	Configured                *wrappers.BoolValue   `protobuf:"bytes,4,opt,name=configured,proto3" json:"configured,omitempty"`
	StateStateClosed          *wrappers.BoolValue   `protobuf:"bytes,5,opt,name=state_state_closed,json=stateStateClosed,proto3" json:"state_state_closed,omitempty"`
	StateState                *wrappers.StringValue `protobuf:"bytes,6,opt,name=state_state,json=stateState,proto3" json:"state_state,omitempty"`
	StateStateTrippedNum      *wrappers.FloatValue  `protobuf:"bytes,7,opt,name=state_state_tripped_num,json=stateStateTrippedNum,proto3" json:"state_state_tripped_num,omitempty"`
	PluginId                  *wrappers.StringValue `protobuf:"bytes,8,opt,name=pluginId,proto3" json:"pluginId,omitempty"`
	ButtonGroupCountNum       *wrappers.FloatValue  `protobuf:"bytes,9,opt,name=buttonGroupCount_num,json=buttonGroupCountNum,proto3" json:"buttonGroupCount_num,omitempty"`
	LastSuccessfulComm        *wrappers.FloatValue  `protobuf:"bytes,10,opt,name=lastSuccessfulComm,proto3" json:"lastSuccessfulComm,omitempty"`
	ButtonGroupCount          *wrappers.FloatValue  `protobuf:"bytes,11,opt,name=buttonGroupCount,proto3" json:"buttonGroupCount,omitempty"`
	Id                        *wrappers.FloatValue  `protobuf:"bytes,12,opt,name=id,proto3" json:"id,omitempty"`
	StateBypassNobypassNum    *wrappers.FloatValue  `protobuf:"bytes,13,opt,name=state_bypass_nobypass_num,json=stateBypassNobypassNum,proto3" json:"state_bypass_nobypass_num,omitempty"`
	SupportsAllOff            *wrappers.BoolValue   `protobuf:"bytes,14,opt,name=supportsAllOff,proto3" json:"supportsAllOff,omitempty"`
	ErrorState                *wrappers.StringValue `protobuf:"bytes,15,opt,name=errorState,proto3" json:"errorState,omitempty"`
	StateStateOpenNum         *wrappers.FloatValue  `protobuf:"bytes,16,opt,name=state_state_open_num,json=stateStateOpenNum,proto3" json:"state_state_open_num,omitempty"`
	RemoteDisplay             *wrappers.BoolValue   `protobuf:"bytes,17,opt,name=remoteDisplay,proto3" json:"remoteDisplay,omitempty"`
	ConfiguredNum             *wrappers.FloatValue  `protobuf:"bytes,18,opt,name=configured_num,json=configuredNum,proto3" json:"configured_num,omitempty"`
	SupportsAllLightsOnOff    *wrappers.BoolValue   `protobuf:"bytes,19,opt,name=supportsAllLightsOnOff,proto3" json:"supportsAllLightsOnOff,omitempty"`
	DisplayStateValUi         *wrappers.StringValue `protobuf:"bytes,20,opt,name=displayStateValUi,proto3" json:"displayStateValUi,omitempty"`
	DisplayStateId            *wrappers.StringValue `protobuf:"bytes,21,opt,name=displayStateId,proto3" json:"displayStateId,omitempty"`
	State_LastChangedTimer    *wrappers.FloatValue  `protobuf:"bytes,22,opt,name=state_LastChangedTimer,json=stateLastChangedTimer,proto3" json:"state_LastChangedTimer,omitempty"`
	StateStateTripped         *wrappers.BoolValue   `protobuf:"bytes,23,opt,name=state_state_tripped,json=stateStateTripped,proto3" json:"state_state_tripped,omitempty"`
	SupportsStatusRequest     *wrappers.BoolValue   `protobuf:"bytes,24,opt,name=supportsStatusRequest,proto3" json:"supportsStatusRequest,omitempty"`
	FolderIdNum               *wrappers.FloatValue  `protobuf:"bytes,25,opt,name=folderId_num,json=folderIdNum,proto3" json:"folderId_num,omitempty"`
	RemoteDisplayNum          *wrappers.FloatValue  `protobuf:"bytes,26,opt,name=remoteDisplay_num,json=remoteDisplayNum,proto3" json:"remoteDisplay_num,omitempty"`
	Description               *wrappers.StringValue `protobuf:"bytes,27,opt,name=description,proto3" json:"description,omitempty"`
	StateBypassBypassedNum    *wrappers.FloatValue  `protobuf:"bytes,28,opt,name=state_bypass_bypassed_num,json=stateBypassBypassedNum,proto3" json:"state_bypass_bypassed_num,omitempty"`
	StateStateOpen            *wrappers.BoolValue   `protobuf:"bytes,29,opt,name=state_state_open,json=stateStateOpen,proto3" json:"state_state_open,omitempty"`
	State_LastChangedShort    *wrappers.StringValue `protobuf:"bytes,30,opt,name=state_LastChangedShort,json=stateLastChangedShort,proto3" json:"state_LastChangedShort,omitempty"`
	SupportsAllLightsOnOffNum *wrappers.FloatValue  `protobuf:"bytes,31,opt,name=supportsAllLightsOnOff_num,json=supportsAllLightsOnOffNum,proto3" json:"supportsAllLightsOnOff_num,omitempty"`
	Address                   *wrappers.StringValue `protobuf:"bytes,32,opt,name=address,proto3" json:"address,omitempty"`
	FolderId                  *wrappers.FloatValue  `protobuf:"bytes,33,opt,name=folderId,proto3" json:"folderId,omitempty"`
	IdNum                     *wrappers.FloatValue  `protobuf:"bytes,34,opt,name=id_num,json=idNum,proto3" json:"id_num,omitempty"`
	State_LastChangedTimerNum *wrappers.FloatValue  `protobuf:"bytes,35,opt,name=state_LastChangedTimer_num,json=stateLastChangedTimerNum,proto3" json:"state_LastChangedTimer_num,omitempty"`
	StateStateClosedNum       *wrappers.FloatValue  `protobuf:"bytes,36,opt,name=state_state_closed_num,json=stateStateClosedNum,proto3" json:"state_state_closed_num,omitempty"`
	Name                      *wrappers.StringValue `protobuf:"bytes,37,opt,name=name,proto3" json:"name,omitempty"`
	SupportsStatusRequestNum  *wrappers.FloatValue  `protobuf:"bytes,38,opt,name=supportsStatusRequest_num,json=supportsStatusRequestNum,proto3" json:"supportsStatusRequest_num,omitempty"`
	LastChanged               *wrappers.FloatValue  `protobuf:"bytes,39,opt,name=lastChanged,proto3" json:"lastChanged,omitempty"`
	StateBypassBypassed       *wrappers.BoolValue   `protobuf:"bytes,40,opt,name=state_bypass_bypassed,json=stateBypassBypassed,proto3" json:"state_bypass_bypassed,omitempty"`
	Enabled                   *wrappers.BoolValue   `protobuf:"bytes,41,opt,name=enabled,proto3" json:"enabled,omitempty"`
	StateBypass               *wrappers.StringValue `protobuf:"bytes,42,opt,name=state_bypass,json=stateBypass,proto3" json:"state_bypass,omitempty"`
	SupportsAllOffNum         *wrappers.FloatValue  `protobuf:"bytes,43,opt,name=supportsAllOff_num,json=supportsAllOffNum,proto3" json:"supportsAllOff_num,omitempty"`
	DeviceTypeId              *wrappers.StringValue `protobuf:"bytes,44,opt,name=deviceTypeId,proto3" json:"deviceTypeId,omitempty"`
	EnabledNum                *wrappers.FloatValue  `protobuf:"bytes,45,opt,name=enabled_num,json=enabledNum,proto3" json:"enabled_num,omitempty"`
	DisplayStateImageSel      *wrappers.StringValue `protobuf:"bytes,46,opt,name=displayStateImageSel,proto3" json:"displayStateImageSel,omitempty"`
	DisplayStateValRaw        *wrappers.StringValue `protobuf:"bytes,47,opt,name=displayStateValRaw,proto3" json:"displayStateValRaw,omitempty"`
	Model                     *wrappers.StringValue `protobuf:"bytes,48,opt,name=model,proto3" json:"model,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}              `json:"-"`
	XXX_unrecognized          []byte                `json:"-"`
	XXX_sizecache             int32                 `json:"-"`
}

func (m *SecurityFields) Reset()         { *m = SecurityFields{} }
func (m *SecurityFields) String() string { return proto.CompactTextString(m) }
func (*SecurityFields) ProtoMessage()    {}
func (*SecurityFields) Descriptor() ([]byte, []int) {
	return fileDescriptor_16d2a71fc1c15683, []int{6}
}

func (m *SecurityFields) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SecurityFields.Unmarshal(m, b)
}
func (m *SecurityFields) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SecurityFields.Marshal(b, m, deterministic)
}
func (m *SecurityFields) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityFields.Merge(m, src)
}
func (m *SecurityFields) XXX_Size() int {
	return xxx_messageInfo_SecurityFields.Size(m)
}
func (m *SecurityFields) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityFields.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityFields proto.InternalMessageInfo

func (m *SecurityFields) GetSubModel() *wrappers.StringValue {
	if m != nil {
		return m.SubModel
	}
	return nil
}

func (m *SecurityFields) GetProtocol() *wrappers.StringValue {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (m *SecurityFields) GetStateBypassNobypass() *wrappers.BoolValue {
	if m != nil {
		return m.StateBypassNobypass
	}
	return nil
}

func (m *SecurityFields) GetConfigured() *wrappers.BoolValue {
	if m != nil {
		return m.Configured
	}
	return nil
}

func (m *SecurityFields) GetStateStateClosed() *wrappers.BoolValue {
	if m != nil {
		return m.StateStateClosed
	}
	return nil
}

func (m *SecurityFields) GetStateState() *wrappers.StringValue {
	if m != nil {
		return m.StateState
	}
	return nil
}

func (m *SecurityFields) GetStateStateTrippedNum() *wrappers.FloatValue {
	if m != nil {
		return m.StateStateTrippedNum
	}
	return nil
}

func (m *SecurityFields) GetPluginId() *wrappers.StringValue {
	if m != nil {
		return m.PluginId
	}
	return nil
}

func (m *SecurityFields) GetButtonGroupCountNum() *wrappers.FloatValue {
	if m != nil {
		return m.ButtonGroupCountNum
	}
	return nil
}

func (m *SecurityFields) GetLastSuccessfulComm() *wrappers.FloatValue {
	if m != nil {
		return m.LastSuccessfulComm
	}
	return nil
}

func (m *SecurityFields) GetButtonGroupCount() *wrappers.FloatValue {
	if m != nil {
		return m.ButtonGroupCount
	}
	return nil
}

func (m *SecurityFields) GetId() *wrappers.FloatValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *SecurityFields) GetStateBypassNobypassNum() *wrappers.FloatValue {
	if m != nil {
		return m.StateBypassNobypassNum
	}
	return nil
}

func (m *SecurityFields) GetSupportsAllOff() *wrappers.BoolValue {
	if m != nil {
		return m.SupportsAllOff
	}
	return nil
}

func (m *SecurityFields) GetErrorState() *wrappers.StringValue {
	if m != nil {
		return m.ErrorState
	}
	return nil
}

func (m *SecurityFields) GetStateStateOpenNum() *wrappers.FloatValue {
	if m != nil {
		return m.StateStateOpenNum
	}
	return nil
}

func (m *SecurityFields) GetRemoteDisplay() *wrappers.BoolValue {
	if m != nil {
		return m.RemoteDisplay
	}
	return nil
}

func (m *SecurityFields) GetConfiguredNum() *wrappers.FloatValue {
	if m != nil {
		return m.ConfiguredNum
	}
	return nil
}

func (m *SecurityFields) GetSupportsAllLightsOnOff() *wrappers.BoolValue {
	if m != nil {
		return m.SupportsAllLightsOnOff
	}
	return nil
}

func (m *SecurityFields) GetDisplayStateValUi() *wrappers.StringValue {
	if m != nil {
		return m.DisplayStateValUi
	}
	return nil
}

func (m *SecurityFields) GetDisplayStateId() *wrappers.StringValue {
	if m != nil {
		return m.DisplayStateId
	}
	return nil
}

func (m *SecurityFields) GetState_LastChangedTimer() *wrappers.FloatValue {
	if m != nil {
		return m.State_LastChangedTimer
	}
	return nil
}

func (m *SecurityFields) GetStateStateTripped() *wrappers.BoolValue {
	if m != nil {
		return m.StateStateTripped
	}
	return nil
}

func (m *SecurityFields) GetSupportsStatusRequest() *wrappers.BoolValue {
	if m != nil {
		return m.SupportsStatusRequest
	}
	return nil
}

func (m *SecurityFields) GetFolderIdNum() *wrappers.FloatValue {
	if m != nil {
		return m.FolderIdNum
	}
	return nil
}

func (m *SecurityFields) GetRemoteDisplayNum() *wrappers.FloatValue {
	if m != nil {
		return m.RemoteDisplayNum
	}
	return nil
}

func (m *SecurityFields) GetDescription() *wrappers.StringValue {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *SecurityFields) GetStateBypassBypassedNum() *wrappers.FloatValue {
	if m != nil {
		return m.StateBypassBypassedNum
	}
	return nil
}

func (m *SecurityFields) GetStateStateOpen() *wrappers.BoolValue {
	if m != nil {
		return m.StateStateOpen
	}
	return nil
}

func (m *SecurityFields) GetState_LastChangedShort() *wrappers.StringValue {
	if m != nil {
		return m.State_LastChangedShort
	}
	return nil
}

func (m *SecurityFields) GetSupportsAllLightsOnOffNum() *wrappers.FloatValue {
	if m != nil {
		return m.SupportsAllLightsOnOffNum
	}
	return nil
}

func (m *SecurityFields) GetAddress() *wrappers.StringValue {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *SecurityFields) GetFolderId() *wrappers.FloatValue {
	if m != nil {
		return m.FolderId
	}
	return nil
}

func (m *SecurityFields) GetIdNum() *wrappers.FloatValue {
	if m != nil {
		return m.IdNum
	}
	return nil
}

func (m *SecurityFields) GetState_LastChangedTimerNum() *wrappers.FloatValue {
	if m != nil {
		return m.State_LastChangedTimerNum
	}
	return nil
}

func (m *SecurityFields) GetStateStateClosedNum() *wrappers.FloatValue {
	if m != nil {
		return m.StateStateClosedNum
	}
	return nil
}

func (m *SecurityFields) GetName() *wrappers.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *SecurityFields) GetSupportsStatusRequestNum() *wrappers.FloatValue {
	if m != nil {
		return m.SupportsStatusRequestNum
	}
	return nil
}

func (m *SecurityFields) GetLastChanged() *wrappers.FloatValue {
	if m != nil {
		return m.LastChanged
	}
	return nil
}

func (m *SecurityFields) GetStateBypassBypassed() *wrappers.BoolValue {
	if m != nil {
		return m.StateBypassBypassed
	}
	return nil
}

func (m *SecurityFields) GetEnabled() *wrappers.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *SecurityFields) GetStateBypass() *wrappers.StringValue {
	if m != nil {
		return m.StateBypass
	}
	return nil
}

func (m *SecurityFields) GetSupportsAllOffNum() *wrappers.FloatValue {
	if m != nil {
		return m.SupportsAllOffNum
	}
	return nil
}

func (m *SecurityFields) GetDeviceTypeId() *wrappers.StringValue {
	if m != nil {
		return m.DeviceTypeId
	}
	return nil
}

func (m *SecurityFields) GetEnabledNum() *wrappers.FloatValue {
	if m != nil {
		return m.EnabledNum
	}
	return nil
}

func (m *SecurityFields) GetDisplayStateImageSel() *wrappers.StringValue {
	if m != nil {
		return m.DisplayStateImageSel
	}
	return nil
}

func (m *SecurityFields) GetDisplayStateValRaw() *wrappers.StringValue {
	if m != nil {
		return m.DisplayStateValRaw
	}
	return nil
}

func (m *SecurityFields) GetModel() *wrappers.StringValue {
	if m != nil {
		return m.Model
	}
	return nil
}

type DimmerSwitchFields struct {
	SubModel                                *wrappers.StringValue `protobuf:"bytes,1,opt,name=subModel,proto3" json:"subModel,omitempty"`
	SupportsRGBandWhiteSimultaneouslyNum    *wrappers.FloatValue  `protobuf:"bytes,2,opt,name=supportsRGBandWhiteSimultaneously_num,json=supportsRGBandWhiteSimultaneouslyNum,proto3" json:"supportsRGBandWhiteSimultaneously_num,omitempty"`
	Protocol                                *wrappers.StringValue `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	DefaultBrightnessNum                    *wrappers.FloatValue  `protobuf:"bytes,4,opt,name=defaultBrightness_num,json=defaultBrightnessNum,proto3" json:"defaultBrightness_num,omitempty"`
	Configured                              *wrappers.BoolValue   `protobuf:"bytes,5,opt,name=configured,proto3" json:"configured,omitempty"`
	Address                                 *wrappers.StringValue `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
	ButtonConfiguredCountNum                *wrappers.FloatValue  `protobuf:"bytes,7,opt,name=buttonConfiguredCount_num,json=buttonConfiguredCountNum,proto3" json:"buttonConfiguredCount_num,omitempty"`
	PluginId                                *wrappers.StringValue `protobuf:"bytes,8,opt,name=pluginId,proto3" json:"pluginId,omitempty"`
	RemoteDisplayNum                        *wrappers.FloatValue  `protobuf:"bytes,9,opt,name=remoteDisplay_num,json=remoteDisplayNum,proto3" json:"remoteDisplay_num,omitempty"`
	ButtonGroupCountNum                     *wrappers.FloatValue  `protobuf:"bytes,10,opt,name=buttonGroupCount_num,json=buttonGroupCountNum,proto3" json:"buttonGroupCount_num,omitempty"`
	StateOnOffStateNum                      *wrappers.FloatValue  `protobuf:"bytes,11,opt,name=state_onOffState_num,json=stateOnOffStateNum,proto3" json:"state_onOffState_num,omitempty"`
	LastSuccessfulComm                      *wrappers.FloatValue  `protobuf:"bytes,12,opt,name=lastSuccessfulComm,proto3" json:"lastSuccessfulComm,omitempty"`
	VersionNum                              *wrappers.FloatValue  `protobuf:"bytes,13,opt,name=version_num,json=versionNum,proto3" json:"version_num,omitempty"`
	ButtonGroupCount                        *wrappers.FloatValue  `protobuf:"bytes,14,opt,name=buttonGroupCount,proto3" json:"buttonGroupCount,omitempty"`
	SupportsWhiteTemperature                *wrappers.BoolValue   `protobuf:"bytes,15,opt,name=supportsWhiteTemperature,proto3" json:"supportsWhiteTemperature,omitempty"`
	SupportsTwoWhiteLevelsNum               *wrappers.FloatValue  `protobuf:"bytes,16,opt,name=supportsTwoWhiteLevels_num,json=supportsTwoWhiteLevelsNum,proto3" json:"supportsTwoWhiteLevels_num,omitempty"`
	DisplayStateValUi                       *wrappers.StringValue `protobuf:"bytes,17,opt,name=displayStateValUi,proto3" json:"displayStateValUi,omitempty"`
	OnStateNum                              *wrappers.FloatValue  `protobuf:"bytes,18,opt,name=onState_num,json=onStateNum,proto3" json:"onState_num,omitempty"`
	SupportsAllOff                          *wrappers.BoolValue   `protobuf:"bytes,19,opt,name=supportsAllOff,proto3" json:"supportsAllOff,omitempty"`
	ErrorState                              *wrappers.StringValue `protobuf:"bytes,20,opt,name=errorState,proto3" json:"errorState,omitempty"`
	SupportsColorNum                        *wrappers.FloatValue  `protobuf:"bytes,21,opt,name=supportsColor_num,json=supportsColorNum,proto3" json:"supportsColor_num,omitempty"`
	RemoteDisplay                           *wrappers.BoolValue   `protobuf:"bytes,22,opt,name=remoteDisplay,proto3" json:"remoteDisplay,omitempty"`
	ConfiguredNum                           *wrappers.FloatValue  `protobuf:"bytes,23,opt,name=configured_num,json=configuredNum,proto3" json:"configured_num,omitempty"`
	StateBrightnessLevel                    *wrappers.FloatValue  `protobuf:"bytes,24,opt,name=state_brightnessLevel,json=stateBrightnessLevel,proto3" json:"state_brightnessLevel,omitempty"`
	SupportsAllLightsOnOff                  *wrappers.BoolValue   `protobuf:"bytes,25,opt,name=supportsAllLightsOnOff,proto3" json:"supportsAllLightsOnOff,omitempty"`
	Id                                      *wrappers.FloatValue  `protobuf:"bytes,26,opt,name=id,proto3" json:"id,omitempty"`
	SupportsWhite                           *wrappers.BoolValue   `protobuf:"bytes,27,opt,name=supportsWhite,proto3" json:"supportsWhite,omitempty"`
	StateBrightnessLevelNum                 *wrappers.FloatValue  `protobuf:"bytes,28,opt,name=state_brightnessLevel_num,json=stateBrightnessLevelNum,proto3" json:"state_brightnessLevel_num,omitempty"`
	Version                                 *wrappers.FloatValue  `protobuf:"bytes,29,opt,name=version,proto3" json:"version,omitempty"`
	DisplayStateId                          *wrappers.StringValue `protobuf:"bytes,30,opt,name=displayStateId,proto3" json:"displayStateId,omitempty"`
	StateOnOffState                         *wrappers.BoolValue   `protobuf:"bytes,31,opt,name=state_onOffState,json=stateOnOffState,proto3" json:"state_onOffState,omitempty"`
	SupportsColor                           *wrappers.BoolValue   `protobuf:"bytes,32,opt,name=supportsColor,proto3" json:"supportsColor,omitempty"`
	BrightnessNum                           *wrappers.FloatValue  `protobuf:"bytes,33,opt,name=brightness_num,json=brightnessNum,proto3" json:"brightness_num,omitempty"`
	SupportsRGBandWhiteSimultaneously       *wrappers.BoolValue   `protobuf:"bytes,34,opt,name=supportsRGBandWhiteSimultaneously,proto3" json:"supportsRGBandWhiteSimultaneously,omitempty"`
	OnBrightensToLast                       *wrappers.BoolValue   `protobuf:"bytes,35,opt,name=onBrightensToLast,proto3" json:"onBrightensToLast,omitempty"`
	Description                             *wrappers.StringValue `protobuf:"bytes,36,opt,name=description,proto3" json:"description,omitempty"`
	IdNum                                   *wrappers.FloatValue  `protobuf:"bytes,37,opt,name=id_num,json=idNum,proto3" json:"id_num,omitempty"`
	OnState                                 *wrappers.BoolValue   `protobuf:"bytes,38,opt,name=onState,proto3" json:"onState,omitempty"`
	OnBrightensToDefaultToggle              *wrappers.BoolValue   `protobuf:"bytes,39,opt,name=onBrightensToDefaultToggle,proto3" json:"onBrightensToDefaultToggle,omitempty"`
	SupportsAllLightsOnOffNum               *wrappers.FloatValue  `protobuf:"bytes,40,opt,name=supportsAllLightsOnOff_num,json=supportsAllLightsOnOffNum,proto3" json:"supportsAllLightsOnOff_num,omitempty"`
	SupportsRGBNum                          *wrappers.FloatValue  `protobuf:"bytes,41,opt,name=supportsRGB_num,json=supportsRGBNum,proto3" json:"supportsRGB_num,omitempty"`
	SupportsRGB                             *wrappers.BoolValue   `protobuf:"bytes,42,opt,name=supportsRGB,proto3" json:"supportsRGB,omitempty"`
	DefaultBrightness                       *wrappers.FloatValue  `protobuf:"bytes,43,opt,name=defaultBrightness,proto3" json:"defaultBrightness,omitempty"`
	FolderId                                *wrappers.FloatValue  `protobuf:"bytes,44,opt,name=folderId,proto3" json:"folderId,omitempty"`
	SupportsTwoWhiteLevels                  *wrappers.BoolValue   `protobuf:"bytes,45,opt,name=supportsTwoWhiteLevels,proto3" json:"supportsTwoWhiteLevels,omitempty"`
	SupportsWhiteTemperatureNum             *wrappers.FloatValue  `protobuf:"bytes,46,opt,name=supportsWhiteTemperature_num,json=supportsWhiteTemperatureNum,proto3" json:"supportsWhiteTemperature_num,omitempty"`
	SupportsWhiteNum                        *wrappers.FloatValue  `protobuf:"bytes,47,opt,name=supportsWhite_num,json=supportsWhiteNum,proto3" json:"supportsWhite_num,omitempty"`
	ButtonConfiguredCount                   *wrappers.FloatValue  `protobuf:"bytes,48,opt,name=buttonConfiguredCount,proto3" json:"buttonConfiguredCount,omitempty"`
	Name                                    *wrappers.StringValue `protobuf:"bytes,49,opt,name=name,proto3" json:"name,omitempty"`
	SupportsStatusRequestNum                *wrappers.FloatValue  `protobuf:"bytes,50,opt,name=supportsStatusRequest_num,json=supportsStatusRequestNum,proto3" json:"supportsStatusRequest_num,omitempty"`
	Brightness                              *wrappers.FloatValue  `protobuf:"bytes,51,opt,name=brightness,proto3" json:"brightness,omitempty"`
	SupportsTwoWhiteLevelsSimultaneouslyNum *wrappers.FloatValue  `protobuf:"bytes,52,opt,name=supportsTwoWhiteLevelsSimultaneously_num,json=supportsTwoWhiteLevelsSimultaneouslyNum,proto3" json:"supportsTwoWhiteLevelsSimultaneously_num,omitempty"`
	OnBrightensToDefaultToggleNum           *wrappers.FloatValue  `protobuf:"bytes,53,opt,name=onBrightensToDefaultToggle_num,json=onBrightensToDefaultToggleNum,proto3" json:"onBrightensToDefaultToggle_num,omitempty"`
	LastChanged                             *wrappers.FloatValue  `protobuf:"bytes,54,opt,name=lastChanged,proto3" json:"lastChanged,omitempty"`
	Enabled                                 *wrappers.BoolValue   `protobuf:"bytes,55,opt,name=enabled,proto3" json:"enabled,omitempty"`
	OnBrightensToLastNum                    *wrappers.FloatValue  `protobuf:"bytes,56,opt,name=onBrightensToLast_num,json=onBrightensToLastNum,proto3" json:"onBrightensToLast_num,omitempty"`
	SupportsTwoWhiteLevelsSimultaneously    *wrappers.BoolValue   `protobuf:"bytes,57,opt,name=supportsTwoWhiteLevelsSimultaneously,proto3" json:"supportsTwoWhiteLevelsSimultaneously,omitempty"`
	FolderIdNum                             *wrappers.FloatValue  `protobuf:"bytes,58,opt,name=folderId_num,json=folderIdNum,proto3" json:"folderId_num,omitempty"`
	SupportsAllOffNum                       *wrappers.FloatValue  `protobuf:"bytes,59,opt,name=supportsAllOff_num,json=supportsAllOffNum,proto3" json:"supportsAllOff_num,omitempty"`
	DeviceTypeId                            *wrappers.StringValue `protobuf:"bytes,60,opt,name=deviceTypeId,proto3" json:"deviceTypeId,omitempty"`
	EnabledNum                              *wrappers.FloatValue  `protobuf:"bytes,61,opt,name=enabled_num,json=enabledNum,proto3" json:"enabled_num,omitempty"`
	DisplayStateImageSel                    *wrappers.StringValue `protobuf:"bytes,62,opt,name=displayStateImageSel,proto3" json:"displayStateImageSel,omitempty"`
	DisplayStateValRaw                      *wrappers.StringValue `protobuf:"bytes,63,opt,name=displayStateValRaw,proto3" json:"displayStateValRaw,omitempty"`
	SupportsStatusRequest                   *wrappers.BoolValue   `protobuf:"bytes,64,opt,name=supportsStatusRequest,proto3" json:"supportsStatusRequest,omitempty"`
	Model                                   *wrappers.StringValue `protobuf:"bytes,65,opt,name=model,proto3" json:"model,omitempty"`
	XXX_NoUnkeyedLiteral                    struct{}              `json:"-"`
	XXX_unrecognized                        []byte                `json:"-"`
	XXX_sizecache                           int32                 `json:"-"`
}

func (m *DimmerSwitchFields) Reset()         { *m = DimmerSwitchFields{} }
func (m *DimmerSwitchFields) String() string { return proto.CompactTextString(m) }
func (*DimmerSwitchFields) ProtoMessage()    {}
func (*DimmerSwitchFields) Descriptor() ([]byte, []int) {
	return fileDescriptor_16d2a71fc1c15683, []int{7}
}

func (m *DimmerSwitchFields) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DimmerSwitchFields.Unmarshal(m, b)
}
func (m *DimmerSwitchFields) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DimmerSwitchFields.Marshal(b, m, deterministic)
}
func (m *DimmerSwitchFields) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DimmerSwitchFields.Merge(m, src)
}
func (m *DimmerSwitchFields) XXX_Size() int {
	return xxx_messageInfo_DimmerSwitchFields.Size(m)
}
func (m *DimmerSwitchFields) XXX_DiscardUnknown() {
	xxx_messageInfo_DimmerSwitchFields.DiscardUnknown(m)
}

var xxx_messageInfo_DimmerSwitchFields proto.InternalMessageInfo

func (m *DimmerSwitchFields) GetSubModel() *wrappers.StringValue {
	if m != nil {
		return m.SubModel
	}
	return nil
}

func (m *DimmerSwitchFields) GetSupportsRGBandWhiteSimultaneouslyNum() *wrappers.FloatValue {
	if m != nil {
		return m.SupportsRGBandWhiteSimultaneouslyNum
	}
	return nil
}

func (m *DimmerSwitchFields) GetProtocol() *wrappers.StringValue {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (m *DimmerSwitchFields) GetDefaultBrightnessNum() *wrappers.FloatValue {
	if m != nil {
		return m.DefaultBrightnessNum
	}
	return nil
}

func (m *DimmerSwitchFields) GetConfigured() *wrappers.BoolValue {
	if m != nil {
		return m.Configured
	}
	return nil
}

func (m *DimmerSwitchFields) GetAddress() *wrappers.StringValue {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *DimmerSwitchFields) GetButtonConfiguredCountNum() *wrappers.FloatValue {
	if m != nil {
		return m.ButtonConfiguredCountNum
	}
	return nil
}

func (m *DimmerSwitchFields) GetPluginId() *wrappers.StringValue {
	if m != nil {
		return m.PluginId
	}
	return nil
}

func (m *DimmerSwitchFields) GetRemoteDisplayNum() *wrappers.FloatValue {
	if m != nil {
		return m.RemoteDisplayNum
	}
	return nil
}

func (m *DimmerSwitchFields) GetButtonGroupCountNum() *wrappers.FloatValue {
	if m != nil {
		return m.ButtonGroupCountNum
	}
	return nil
}

func (m *DimmerSwitchFields) GetStateOnOffStateNum() *wrappers.FloatValue {
	if m != nil {
		return m.StateOnOffStateNum
	}
	return nil
}

func (m *DimmerSwitchFields) GetLastSuccessfulComm() *wrappers.FloatValue {
	if m != nil {
		return m.LastSuccessfulComm
	}
	return nil
}

func (m *DimmerSwitchFields) GetVersionNum() *wrappers.FloatValue {
	if m != nil {
		return m.VersionNum
	}
	return nil
}

func (m *DimmerSwitchFields) GetButtonGroupCount() *wrappers.FloatValue {
	if m != nil {
		return m.ButtonGroupCount
	}
	return nil
}

func (m *DimmerSwitchFields) GetSupportsWhiteTemperature() *wrappers.BoolValue {
	if m != nil {
		return m.SupportsWhiteTemperature
	}
	return nil
}

func (m *DimmerSwitchFields) GetSupportsTwoWhiteLevelsNum() *wrappers.FloatValue {
	if m != nil {
		return m.SupportsTwoWhiteLevelsNum
	}
	return nil
}

func (m *DimmerSwitchFields) GetDisplayStateValUi() *wrappers.StringValue {
	if m != nil {
		return m.DisplayStateValUi
	}
	return nil
}

func (m *DimmerSwitchFields) GetOnStateNum() *wrappers.FloatValue {
	if m != nil {
		return m.OnStateNum
	}
	return nil
}

func (m *DimmerSwitchFields) GetSupportsAllOff() *wrappers.BoolValue {
	if m != nil {
		return m.SupportsAllOff
	}
	return nil
}

func (m *DimmerSwitchFields) GetErrorState() *wrappers.StringValue {
	if m != nil {
		return m.ErrorState
	}
	return nil
}

func (m *DimmerSwitchFields) GetSupportsColorNum() *wrappers.FloatValue {
	if m != nil {
		return m.SupportsColorNum
	}
	return nil
}

func (m *DimmerSwitchFields) GetRemoteDisplay() *wrappers.BoolValue {
	if m != nil {
		return m.RemoteDisplay
	}
	return nil
}

func (m *DimmerSwitchFields) GetConfiguredNum() *wrappers.FloatValue {
	if m != nil {
		return m.ConfiguredNum
	}
	return nil
}

func (m *DimmerSwitchFields) GetStateBrightnessLevel() *wrappers.FloatValue {
	if m != nil {
		return m.StateBrightnessLevel
	}
	return nil
}

func (m *DimmerSwitchFields) GetSupportsAllLightsOnOff() *wrappers.BoolValue {
	if m != nil {
		return m.SupportsAllLightsOnOff
	}
	return nil
}

func (m *DimmerSwitchFields) GetId() *wrappers.FloatValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *DimmerSwitchFields) GetSupportsWhite() *wrappers.BoolValue {
	if m != nil {
		return m.SupportsWhite
	}
	return nil
}

func (m *DimmerSwitchFields) GetStateBrightnessLevelNum() *wrappers.FloatValue {
	if m != nil {
		return m.StateBrightnessLevelNum
	}
	return nil
}

func (m *DimmerSwitchFields) GetVersion() *wrappers.FloatValue {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *DimmerSwitchFields) GetDisplayStateId() *wrappers.StringValue {
	if m != nil {
		return m.DisplayStateId
	}
	return nil
}

func (m *DimmerSwitchFields) GetStateOnOffState() *wrappers.BoolValue {
	if m != nil {
		return m.StateOnOffState
	}
	return nil
}

func (m *DimmerSwitchFields) GetSupportsColor() *wrappers.BoolValue {
	if m != nil {
		return m.SupportsColor
	}
	return nil
}

func (m *DimmerSwitchFields) GetBrightnessNum() *wrappers.FloatValue {
	if m != nil {
		return m.BrightnessNum
	}
	return nil
}

func (m *DimmerSwitchFields) GetSupportsRGBandWhiteSimultaneously() *wrappers.BoolValue {
	if m != nil {
		return m.SupportsRGBandWhiteSimultaneously
	}
	return nil
}

func (m *DimmerSwitchFields) GetOnBrightensToLast() *wrappers.BoolValue {
	if m != nil {
		return m.OnBrightensToLast
	}
	return nil
}

func (m *DimmerSwitchFields) GetDescription() *wrappers.StringValue {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *DimmerSwitchFields) GetIdNum() *wrappers.FloatValue {
	if m != nil {
		return m.IdNum
	}
	return nil
}

func (m *DimmerSwitchFields) GetOnState() *wrappers.BoolValue {
	if m != nil {
		return m.OnState
	}
	return nil
}

func (m *DimmerSwitchFields) GetOnBrightensToDefaultToggle() *wrappers.BoolValue {
	if m != nil {
		return m.OnBrightensToDefaultToggle
	}
	return nil
}

func (m *DimmerSwitchFields) GetSupportsAllLightsOnOffNum() *wrappers.FloatValue {
	if m != nil {
		return m.SupportsAllLightsOnOffNum
	}
	return nil
}

func (m *DimmerSwitchFields) GetSupportsRGBNum() *wrappers.FloatValue {
	if m != nil {
		return m.SupportsRGBNum
	}
	return nil
}

func (m *DimmerSwitchFields) GetSupportsRGB() *wrappers.BoolValue {
	if m != nil {
		return m.SupportsRGB
	}
	return nil
}

func (m *DimmerSwitchFields) GetDefaultBrightness() *wrappers.FloatValue {
	if m != nil {
		return m.DefaultBrightness
	}
	return nil
}

func (m *DimmerSwitchFields) GetFolderId() *wrappers.FloatValue {
	if m != nil {
		return m.FolderId
	}
	return nil
}

func (m *DimmerSwitchFields) GetSupportsTwoWhiteLevels() *wrappers.BoolValue {
	if m != nil {
		return m.SupportsTwoWhiteLevels
	}
	return nil
}

func (m *DimmerSwitchFields) GetSupportsWhiteTemperatureNum() *wrappers.FloatValue {
	if m != nil {
		return m.SupportsWhiteTemperatureNum
	}
	return nil
}

func (m *DimmerSwitchFields) GetSupportsWhiteNum() *wrappers.FloatValue {
	if m != nil {
		return m.SupportsWhiteNum
	}
	return nil
}

func (m *DimmerSwitchFields) GetButtonConfiguredCount() *wrappers.FloatValue {
	if m != nil {
		return m.ButtonConfiguredCount
	}
	return nil
}

func (m *DimmerSwitchFields) GetName() *wrappers.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *DimmerSwitchFields) GetSupportsStatusRequestNum() *wrappers.FloatValue {
	if m != nil {
		return m.SupportsStatusRequestNum
	}
	return nil
}

func (m *DimmerSwitchFields) GetBrightness() *wrappers.FloatValue {
	if m != nil {
		return m.Brightness
	}
	return nil
}

func (m *DimmerSwitchFields) GetSupportsTwoWhiteLevelsSimultaneouslyNum() *wrappers.FloatValue {
	if m != nil {
		return m.SupportsTwoWhiteLevelsSimultaneouslyNum
	}
	return nil
}

func (m *DimmerSwitchFields) GetOnBrightensToDefaultToggleNum() *wrappers.FloatValue {
	if m != nil {
		return m.OnBrightensToDefaultToggleNum
	}
	return nil
}

func (m *DimmerSwitchFields) GetLastChanged() *wrappers.FloatValue {
	if m != nil {
		return m.LastChanged
	}
	return nil
}

func (m *DimmerSwitchFields) GetEnabled() *wrappers.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *DimmerSwitchFields) GetOnBrightensToLastNum() *wrappers.FloatValue {
	if m != nil {
		return m.OnBrightensToLastNum
	}
	return nil
}

func (m *DimmerSwitchFields) GetSupportsTwoWhiteLevelsSimultaneously() *wrappers.BoolValue {
	if m != nil {
		return m.SupportsTwoWhiteLevelsSimultaneously
	}
	return nil
}

func (m *DimmerSwitchFields) GetFolderIdNum() *wrappers.FloatValue {
	if m != nil {
		return m.FolderIdNum
	}
	return nil
}

func (m *DimmerSwitchFields) GetSupportsAllOffNum() *wrappers.FloatValue {
	if m != nil {
		return m.SupportsAllOffNum
	}
	return nil
}

func (m *DimmerSwitchFields) GetDeviceTypeId() *wrappers.StringValue {
	if m != nil {
		return m.DeviceTypeId
	}
	return nil
}

func (m *DimmerSwitchFields) GetEnabledNum() *wrappers.FloatValue {
	if m != nil {
		return m.EnabledNum
	}
	return nil
}

func (m *DimmerSwitchFields) GetDisplayStateImageSel() *wrappers.StringValue {
	if m != nil {
		return m.DisplayStateImageSel
	}
	return nil
}

func (m *DimmerSwitchFields) GetDisplayStateValRaw() *wrappers.StringValue {
	if m != nil {
		return m.DisplayStateValRaw
	}
	return nil
}

func (m *DimmerSwitchFields) GetSupportsStatusRequest() *wrappers.BoolValue {
	if m != nil {
		return m.SupportsStatusRequest
	}
	return nil
}

func (m *DimmerSwitchFields) GetModel() *wrappers.StringValue {
	if m != nil {
		return m.Model
	}
	return nil
}

type GenericFields struct {
	LastSuccessfulComm   *wrappers.FloatValue  `protobuf:"bytes,1,opt,name=lastSuccessfulComm,proto3" json:"lastSuccessfulComm,omitempty"`
	Id                   *wrappers.FloatValue  `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name                 *wrappers.StringValue `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	LastChanged          *wrappers.FloatValue  `protobuf:"bytes,4,opt,name=lastChanged,proto3" json:"lastChanged,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GenericFields) Reset()         { *m = GenericFields{} }
func (m *GenericFields) String() string { return proto.CompactTextString(m) }
func (*GenericFields) ProtoMessage()    {}
func (*GenericFields) Descriptor() ([]byte, []int) {
	return fileDescriptor_16d2a71fc1c15683, []int{8}
}

func (m *GenericFields) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenericFields.Unmarshal(m, b)
}
func (m *GenericFields) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenericFields.Marshal(b, m, deterministic)
}
func (m *GenericFields) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericFields.Merge(m, src)
}
func (m *GenericFields) XXX_Size() int {
	return xxx_messageInfo_GenericFields.Size(m)
}
func (m *GenericFields) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericFields.DiscardUnknown(m)
}

var xxx_messageInfo_GenericFields proto.InternalMessageInfo

func (m *GenericFields) GetLastSuccessfulComm() *wrappers.FloatValue {
	if m != nil {
		return m.LastSuccessfulComm
	}
	return nil
}

func (m *GenericFields) GetId() *wrappers.FloatValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *GenericFields) GetName() *wrappers.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *GenericFields) GetLastChanged() *wrappers.FloatValue {
	if m != nil {
		return m.LastChanged
	}
	return nil
}

type IndigoUnknownMessage struct {
	Measurement *wrappers.StringValue `protobuf:"bytes,1,opt,name=measurement,proto3" json:"measurement,omitempty"`
	Time        *timestamp.Timestamp  `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	Tags        *IndigoTags           `protobuf:"bytes,4,opt,name=tags,proto3" json:"tags,omitempty"`
	// Types that are valid to be assigned to Fields:
	//	*IndigoUnknownMessage_Binary
	//	*IndigoUnknownMessage_Dimmer
	//	*IndigoUnknownMessage_Hvac
	//	*IndigoUnknownMessage_Security
	//	*IndigoUnknownMessage_Generic
	Fields               isIndigoUnknownMessage_Fields `protobuf_oneof:"fields"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *IndigoUnknownMessage) Reset()         { *m = IndigoUnknownMessage{} }
func (m *IndigoUnknownMessage) String() string { return proto.CompactTextString(m) }
func (*IndigoUnknownMessage) ProtoMessage()    {}
func (*IndigoUnknownMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_16d2a71fc1c15683, []int{9}
}

func (m *IndigoUnknownMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IndigoUnknownMessage.Unmarshal(m, b)
}
func (m *IndigoUnknownMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IndigoUnknownMessage.Marshal(b, m, deterministic)
}
func (m *IndigoUnknownMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndigoUnknownMessage.Merge(m, src)
}
func (m *IndigoUnknownMessage) XXX_Size() int {
	return xxx_messageInfo_IndigoUnknownMessage.Size(m)
}
func (m *IndigoUnknownMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_IndigoUnknownMessage.DiscardUnknown(m)
}

var xxx_messageInfo_IndigoUnknownMessage proto.InternalMessageInfo

func (m *IndigoUnknownMessage) GetMeasurement() *wrappers.StringValue {
	if m != nil {
		return m.Measurement
	}
	return nil
}

func (m *IndigoUnknownMessage) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *IndigoUnknownMessage) GetTags() *IndigoTags {
	if m != nil {
		return m.Tags
	}
	return nil
}

type isIndigoUnknownMessage_Fields interface {
	isIndigoUnknownMessage_Fields()
}

type IndigoUnknownMessage_Binary struct {
	Binary *BinarySwitchFields `protobuf:"bytes,11,opt,name=binary,proto3,oneof"`
}

type IndigoUnknownMessage_Dimmer struct {
	Dimmer *DimmerSwitchFields `protobuf:"bytes,12,opt,name=dimmer,proto3,oneof"`
}

type IndigoUnknownMessage_Hvac struct {
	Hvac *HvacFields `protobuf:"bytes,13,opt,name=hvac,proto3,oneof"`
}

type IndigoUnknownMessage_Security struct {
	Security *SecurityFields `protobuf:"bytes,14,opt,name=security,proto3,oneof"`
}

type IndigoUnknownMessage_Generic struct {
	Generic *GenericFields `protobuf:"bytes,15,opt,name=generic,proto3,oneof"`
}

func (*IndigoUnknownMessage_Binary) isIndigoUnknownMessage_Fields() {}

func (*IndigoUnknownMessage_Dimmer) isIndigoUnknownMessage_Fields() {}

func (*IndigoUnknownMessage_Hvac) isIndigoUnknownMessage_Fields() {}

func (*IndigoUnknownMessage_Security) isIndigoUnknownMessage_Fields() {}

func (*IndigoUnknownMessage_Generic) isIndigoUnknownMessage_Fields() {}

func (m *IndigoUnknownMessage) GetFields() isIndigoUnknownMessage_Fields {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *IndigoUnknownMessage) GetBinary() *BinarySwitchFields {
	if x, ok := m.GetFields().(*IndigoUnknownMessage_Binary); ok {
		return x.Binary
	}
	return nil
}

func (m *IndigoUnknownMessage) GetDimmer() *DimmerSwitchFields {
	if x, ok := m.GetFields().(*IndigoUnknownMessage_Dimmer); ok {
		return x.Dimmer
	}
	return nil
}

func (m *IndigoUnknownMessage) GetHvac() *HvacFields {
	if x, ok := m.GetFields().(*IndigoUnknownMessage_Hvac); ok {
		return x.Hvac
	}
	return nil
}

func (m *IndigoUnknownMessage) GetSecurity() *SecurityFields {
	if x, ok := m.GetFields().(*IndigoUnknownMessage_Security); ok {
		return x.Security
	}
	return nil
}

func (m *IndigoUnknownMessage) GetGeneric() *GenericFields {
	if x, ok := m.GetFields().(*IndigoUnknownMessage_Generic); ok {
		return x.Generic
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*IndigoUnknownMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*IndigoUnknownMessage_Binary)(nil),
		(*IndigoUnknownMessage_Dimmer)(nil),
		(*IndigoUnknownMessage_Hvac)(nil),
		(*IndigoUnknownMessage_Security)(nil),
		(*IndigoUnknownMessage_Generic)(nil),
	}
}

type SubscribeArgs struct {
	MulticastPort        uint32   `protobuf:"varint,1,opt,name=multicast_port,json=multicastPort,proto3" json:"multicast_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeArgs) Reset()         { *m = SubscribeArgs{} }
func (m *SubscribeArgs) String() string { return proto.CompactTextString(m) }
func (*SubscribeArgs) ProtoMessage()    {}
func (*SubscribeArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_16d2a71fc1c15683, []int{10}
}

func (m *SubscribeArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeArgs.Unmarshal(m, b)
}
func (m *SubscribeArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeArgs.Marshal(b, m, deterministic)
}
func (m *SubscribeArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeArgs.Merge(m, src)
}
func (m *SubscribeArgs) XXX_Size() int {
	return xxx_messageInfo_SubscribeArgs.Size(m)
}
func (m *SubscribeArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeArgs.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeArgs proto.InternalMessageInfo

func (m *SubscribeArgs) GetMulticastPort() uint32 {
	if m != nil {
		return m.MulticastPort
	}
	return 0
}

func init() {
	proto.RegisterType((*DeviceChange)(nil), "indigo.DeviceChange")
	proto.RegisterType((*IndigoEvent)(nil), "indigo.IndigoEvent")
	proto.RegisterType((*IndigoFields)(nil), "indigo.IndigoFields")
	proto.RegisterType((*IndigoTags)(nil), "indigo.IndigoTags")
	proto.RegisterType((*HvacFields)(nil), "indigo.HvacFields")
	proto.RegisterType((*BinarySwitchFields)(nil), "indigo.BinarySwitchFields")
	proto.RegisterType((*SecurityFields)(nil), "indigo.SecurityFields")
	proto.RegisterType((*DimmerSwitchFields)(nil), "indigo.DimmerSwitchFields")
	proto.RegisterType((*GenericFields)(nil), "indigo.GenericFields")
	proto.RegisterType((*IndigoUnknownMessage)(nil), "indigo.IndigoUnknownMessage")
	proto.RegisterType((*SubscribeArgs)(nil), "indigo.SubscribeArgs")
}

func init() {
	proto.RegisterFile("proto/indigo.proto", fileDescriptor_16d2a71fc1c15683)
}

var fileDescriptor_16d2a71fc1c15683 = []byte{
	// 3615 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x5c, 0xdd, 0x52, 0xdc, 0x46,
	0x16, 0x36, 0x36, 0x06, 0x7c, 0xf8, 0x31, 0x34, 0x7f, 0x62, 0xc0, 0x60, 0x63, 0x63, 0xe3, 0x8d,
	0x03, 0xb6, 0x83, 0x7f, 0x36, 0x71, 0x6c, 0x0c, 0xc4, 0x0c, 0x0e, 0x36, 0x64, 0x06, 0x9c, 0xc4,
	0xd9, 0xc4, 0xd1, 0xcc, 0xf4, 0x0c, 0xaa, 0xd5, 0x48, 0xb3, 0xfa, 0xc1, 0xc5, 0x23, 0xec, 0xcb,
	0xec, 0xed, 0x3e, 0xc8, 0x56, 0xed, 0xdd, 0x3e, 0xc0, 0xbe, 0xc2, 0xd6, 0x5e, 0x6c, 0x75, 0xab,
	0xa5, 0x69, 0x49, 0x2d, 0xa9, 0xa5, 0x99, 0xaa, 0xbd, 0x49, 0x0c, 0xf4, 0x77, 0xd4, 0x7d, 0xba,
	0xfb, 0xf4, 0xf7, 0x9d, 0xd3, 0x12, 0xa0, 0x8e, 0x65, 0x3a, 0xe6, 0xa6, 0x66, 0x34, 0xb4, 0x96,
	0xb9, 0x41, 0x7f, 0x40, 0x43, 0xde, 0x4f, 0xa5, 0x95, 0x96, 0x69, 0xb6, 0x74, 0xbc, 0x49, 0x7f,
	0x5b, 0x73, 0x9b, 0x9b, 0x8e, 0xd6, 0xc6, 0xb6, 0xa3, 0xb6, 0x3b, 0x5e, 0xc3, 0xd2, 0x72, 0xb4,
	0xc1, 0x67, 0x4b, 0xed, 0x74, 0xb0, 0x65, 0x7b, 0x7f, 0x5f, 0xdd, 0x86, 0xb1, 0x3d, 0x7c, 0xae,
	0xd5, 0xf1, 0xee, 0x99, 0x6a, 0xb4, 0x30, 0x7a, 0x08, 0x83, 0x86, 0xda, 0xc6, 0xca, 0xc0, 0xcd,
	0x81, 0xf5, 0xd1, 0xc7, 0x4b, 0x1b, 0x1e, 0x7c, 0xc3, 0x87, 0x6f, 0x54, 0x1d, 0x4b, 0x33, 0x5a,
	0x1f, 0x54, 0xdd, 0xc5, 0x15, 0xda, 0x72, 0xf5, 0x1f, 0x03, 0x30, 0x7a, 0x40, 0x7b, 0xf3, 0xdd,
	0x39, 0x36, 0x1c, 0xf4, 0x12, 0x46, 0xdb, 0x58, 0xb5, 0x5d, 0x0b, 0xb7, 0xb1, 0xe1, 0x48, 0x19,
	0xe2, 0x01, 0x68, 0x03, 0x06, 0xc9, 0x20, 0x94, 0xab, 0x14, 0x58, 0x8a, 0x01, 0x4f, 0xfc, 0x11,
	0x56, 0x68, 0x3b, 0x74, 0x17, 0x06, 0x1d, 0xb5, 0x65, 0x2b, 0x57, 0x68, 0x7b, 0xb4, 0xc1, 0xfc,
	0xe4, 0x75, 0xe9, 0x44, 0x6d, 0xd9, 0x15, 0xfa, 0x77, 0xf4, 0x00, 0x86, 0x9a, 0x1a, 0xd6, 0x1b,
	0xb6, 0x32, 0x48, 0x5b, 0xce, 0x84, 0x5b, 0xbe, 0xa1, 0x7f, 0xab, 0xb0, 0x36, 0xab, 0x7f, 0x1d,
	0x81, 0x31, 0xfe, 0x0f, 0xf9, 0x1d, 0x83, 0xbe, 0x85, 0x51, 0x5d, 0xb5, 0x1d, 0xcf, 0xb1, 0x0d,
	0xe5, 0x32, 0x05, 0x2e, 0xc6, 0x80, 0x6f, 0x74, 0x53, 0x75, 0x98, 0x1f, 0xb8, 0xf6, 0xe8, 0x7b,
	0x40, 0xe4, 0xc7, 0xaa, 0x5b, 0xaf, 0x63, 0xdb, 0x6e, 0xba, 0xfa, 0xae, 0xd9, 0x6e, 0xb3, 0x51,
	0xa6, 0x5a, 0x11, 0xc0, 0xd0, 0x17, 0x70, 0x59, 0x6b, 0xb0, 0x81, 0xa7, 0x82, 0x2f, 0x6b, 0x0d,
	0xf4, 0x0d, 0x40, 0xcd, 0xd2, 0x5a, 0x67, 0x8e, 0x81, 0x6d, 0x5b, 0x81, 0x6c, 0x10, 0xd7, 0x1c,
	0x6d, 0xc1, 0xb0, 0x69, 0x54, 0x1d, 0xd5, 0xc1, 0xca, 0x68, 0xc2, 0x0c, 0xee, 0x98, 0xa6, 0xee,
	0x01, 0xfd, 0xa6, 0xe8, 0x3b, 0x98, 0xb4, 0xc9, 0x3f, 0x3e, 0x99, 0xc6, 0x51, 0xb3, 0xe9, 0xc1,
	0xc7, 0x32, 0xe1, 0xd7, 0x29, 0xe6, 0x28, 0x80, 0xa0, 0x17, 0x30, 0xca, 0x2c, 0x7e, 0x32, 0xdc,
	0xb6, 0x32, 0x2e, 0xd1, 0x75, 0xd6, 0xfe, 0xbd, 0xdb, 0x46, 0xef, 0x61, 0xc6, 0xeb, 0xc4, 0x99,
	0xdb, 0xd6, 0x1a, 0x9a, 0x73, 0x71, 0x60, 0x74, 0x5c, 0xe7, 0x91, 0x32, 0x9b, 0x6d, 0x66, 0x9a,
	0x02, 0xcb, 0x21, 0x1c, 0x7a, 0x05, 0x63, 0x75, 0xd3, 0xd4, 0xab, 0xd8, 0xe9, 0x98, 0x9a, 0xe1,
	0x28, 0x73, 0xd9, 0x76, 0x42, 0x00, 0xf4, 0x14, 0x46, 0xc8, 0xcf, 0x07, 0xf6, 0x91, 0xa1, 0xcc,
	0x67, 0x7a, 0x23, 0x68, 0x8b, 0x5e, 0x7a, 0x0f, 0x26, 0xff, 0xa6, 0x7e, 0x50, 0x24, 0x96, 0x9e,
	0x0f, 0x20, 0x8e, 0x78, 0x05, 0x63, 0x67, 0x58, 0x75, 0x82, 0x8e, 0x2f, 0x48, 0x74, 0x9c, 0x07,
	0x90, 0x8e, 0x93, 0x9f, 0x69, 0xc7, 0x4b, 0xd9, 0x1d, 0xf7, 0xdb, 0x92, 0x8e, 0xfb, 0xff, 0xa6,
	0x1d, 0x5f, 0x94, 0xe8, 0xb8, 0x0f, 0x20, 0x1d, 0x3f, 0x81, 0x79, 0x6f, 0x06, 0x1d, 0xdc, 0xee,
	0x60, 0x4b, 0x75, 0x5c, 0x0b, 0xb3, 0x49, 0xbc, 0x91, 0x6d, 0x6a, 0x8e, 0x62, 0x4f, 0xa2, 0xd0,
	0xd5, 0xbf, 0x0d, 0x00, 0x74, 0xc3, 0x49, 0x81, 0x48, 0xb0, 0x05, 0x43, 0x4d, 0x53, 0x6f, 0x60,
	0x8b, 0x05, 0x81, 0x74, 0x0c, 0x6b, 0x8b, 0x9e, 0xc3, 0x88, 0xf7, 0xaf, 0x83, 0x06, 0xdb, 0xf6,
	0xe9, 0xb8, 0xa0, 0xf5, 0xea, 0x7f, 0xb7, 0x01, 0xca, 0xe7, 0x6a, 0x9d, 0x85, 0xae, 0xf7, 0x30,
	0xd3, 0xc0, 0xde, 0x9a, 0x6e, 0x6a, 0xd8, 0x0a, 0xbc, 0x3b, 0x20, 0xb1, 0xae, 0xa3, 0x40, 0xe2,
	0xe5, 0x0f, 0xa0, 0xd8, 0x6e, 0xa7, 0x63, 0x5a, 0x8e, 0xbd, 0xcb, 0x2d, 0x57, 0x6a, 0x53, 0x22,
	0xca, 0xcd, 0x8b, 0xc0, 0xc4, 0xee, 0xaf, 0xb0, 0xc4, 0xf6, 0xdf, 0xb9, 0x5a, 0x3f, 0xa2, 0x93,
	0xa0, 0x99, 0xc6, 0x3b, 0xb3, 0x81, 0x0f, 0xec, 0xa3, 0x66, 0x93, 0x39, 0x21, 0x6d, 0x25, 0x2d,
	0x7a, 0xdb, 0x50, 0x08, 0x47, 0xef, 0x82, 0xed, 0x7d, 0xae, 0xd6, 0xcb, 0x58, 0x75, 0xbc, 0x11,
	0xb1, 0xa8, 0x98, 0x66, 0x76, 0x3a, 0x30, 0xdb, 0x85, 0x91, 0xe9, 0xe9, 0xe8, 0x6e, 0x4b, 0x33,
	0x0e, 0x1a, 0xec, 0xac, 0xca, 0x98, 0x1e, 0xbf, 0x75, 0x42, 0x64, 0x1f, 0x2a, 0x16, 0xd9, 0x49,
	0x37, 0x48, 0xd3, 0xba, 0xa9, 0x2b, 0xc3, 0x52, 0xdd, 0x60, 0xad, 0xd1, 0x3e, 0x4c, 0x75, 0xfd,
	0xf1, 0x46, 0x35, 0xa8, 0x33, 0x46, 0x32, 0x9d, 0x31, 0x19, 0x38, 0x83, 0x61, 0xd0, 0x0b, 0x00,
	0x6c, 0x59, 0xa6, 0xe5, 0x85, 0xed, 0x6b, 0x12, 0x9d, 0xe0, 0xda, 0x23, 0x15, 0x96, 0xbb, 0xdd,
	0xd8, 0x13, 0xad, 0x53, 0x89, 0x13, 0x68, 0x29, 0xe8, 0xd4, 0x9e, 0x60, 0xc1, 0x9e, 0xfa, 0x61,
	0x21, 0x14, 0xd8, 0xed, 0xd7, 0xba, 0xce, 0xce, 0xa8, 0xf4, 0xde, 0xce, 0xc5, 0x83, 0x3b, 0xc1,
	0xa2, 0x8f, 0x50, 0x4a, 0x58, 0xaf, 0x9f, 0x5c, 0x8d, 0x1d, 0x5f, 0xe9, 0x96, 0x15, 0xf1, 0x7a,
	0x3d, 0xd5, 0xd0, 0x2f, 0xb0, 0x18, 0x9a, 0x1c, 0x6f, 0x19, 0xbf, 0xd6, 0x3f, 0xab, 0x17, 0x64,
	0x9a, 0xc6, 0x33, 0xa7, 0xa9, 0xc4, 0x4f, 0x53, 0x18, 0x8d, 0x9e, 0xc1, 0x08, 0x31, 0x4b, 0x7e,
	0xab, 0x4c, 0x64, 0x3b, 0x37, 0x68, 0x8c, 0x4e, 0x41, 0xe9, 0xf6, 0x8a, 0x6c, 0x5f, 0x6e, 0x96,
	0xae, 0xcb, 0x06, 0xd8, 0x72, 0x08, 0x4b, 0xe6, 0x27, 0x34, 0xd8, 0xb0, 0x23, 0x89, 0xe5, 0xc9,
	0x6c, 0xcb, 0x0b, 0x62, 0x47, 0x12, 0xe3, 0x1f, 0xa1, 0xc4, 0x9d, 0x06, 0x55, 0x6c, 0xd8, 0xa6,
	0xb5, 0x6b, 0xba, 0x2c, 0x5e, 0x4d, 0x49, 0xd8, 0x16, 0xc3, 0x89, 0xed, 0x4f, 0x70, 0x23, 0x31,
	0x62, 0x91, 0x50, 0xa1, 0xa0, 0xcc, 0x79, 0x5a, 0x4a, 0x0a, 0x59, 0x04, 0x8f, 0xde, 0x02, 0xf2,
	0x1e, 0x60, 0xb3, 0x38, 0x49, 0xad, 0x4e, 0x67, 0x77, 0xda, 0xdb, 0xda, 0x55, 0x0e, 0x85, 0x30,
	0xdc, 0x4c, 0x0b, 0xaf, 0xd4, 0x1d, 0x33, 0xd9, 0x96, 0x97, 0x53, 0x62, 0x2c, 0xf1, 0x89, 0x7f,
	0x3c, 0xce, 0x4a, 0x1f, 0x8f, 0x29, 0xa7, 0xf6, 0x5c, 0xe1, 0x53, 0x9b, 0xb8, 0x4e, 0x10, 0x4b,
	0xe6, 0x25, 0x5c, 0x17, 0x0f, 0x20, 0xd5, 0x20, 0x80, 0x84, 0xf6, 0x93, 0xeb, 0x98, 0x8c, 0x5b,
	0xa5, 0xcd, 0xf0, 0x9c, 0x60, 0x27, 0xba, 0x8e, 0x49, 0xe7, 0x96, 0x9d, 0x84, 0xaf, 0x75, 0xdd,
	0x9f, 0x81, 0x05, 0x99, 0xb9, 0x0d, 0xc1, 0x48, 0x07, 0x5f, 0xc0, 0x28, 0x36, 0xd4, 0x9a, 0x8e,
	0x1b, 0xd4, 0x48, 0x49, 0x82, 0xf8, 0xb2, 0xf6, 0x0c, 0xdd, 0xf4, 0x62, 0xb9, 0x2c, 0xeb, 0x02,
	0xd6, 0x9e, 0xa0, 0xdb, 0x70, 0x27, 0x71, 0x5d, 0x1d, 0x5b, 0x66, 0xcb, 0x52, 0xdb, 0x74, 0xd5,
	0x2e, 0x65, 0x7a, 0xea, 0x76, 0xd2, 0xd2, 0xe2, 0xcc, 0xa0, 0xaf, 0x01, 0xea, 0xa6, 0xd1, 0xd4,
	0x5a, 0xae, 0x85, 0x1b, 0x8c, 0xd6, 0xa5, 0x19, 0xe5, 0x5a, 0xa3, 0x16, 0xdc, 0x4a, 0xdd, 0xaf,
	0x74, 0xf8, 0xcb, 0xd9, 0xc3, 0x5f, 0x49, 0xdb, 0xb4, 0xc4, 0x27, 0x65, 0x98, 0xb2, 0x70, 0xdb,
	0x74, 0xf0, 0x9e, 0x66, 0x77, 0x74, 0xf5, 0x82, 0x1a, 0x5e, 0xc9, 0x36, 0x3c, 0x19, 0x42, 0x31,
	0x51, 0x52, 0x73, 0x1d, 0xc7, 0x34, 0xf6, 0x2d, 0xd3, 0xed, 0x74, 0x03, 0xd7, 0x4d, 0x09, 0xf2,
	0x16, 0x05, 0x12, 0x7b, 0x51, 0x6d, 0x70, 0x2b, 0xa7, 0x36, 0x90, 0x98, 0x6d, 0x12, 0xdc, 0x95,
	0xd5, 0x9e, 0x67, 0x9b, 0x98, 0x41, 0x6f, 0x61, 0xaa, 0xe1, 0x39, 0x83, 0xb2, 0x85, 0x0f, 0xaa,
	0x7e, 0xaa, 0x29, 0xb7, 0x25, 0x42, 0x4b, 0x1c, 0x46, 0xd5, 0x05, 0x3b, 0xc9, 0xe8, 0xd0, 0xef,
	0xc8, 0xa8, 0x0b, 0x06, 0x60, 0xb2, 0x28, 0xa4, 0xe7, 0xd6, 0xf2, 0xea, 0xb9, 0x9f, 0x79, 0xc2,
	0x10, 0x25, 0x2a, 0xca, 0xdd, 0x4c, 0x8f, 0x2d, 0x24, 0xb2, 0x1c, 0x99, 0x69, 0xa1, 0xe1, 0xea,
	0x5e, 0xcf, 0xd3, 0x42, 0x63, 0xd7, 0x13, 0x18, 0x3e, 0xc7, 0x96, 0xad, 0x99, 0x86, 0xb2, 0x9e,
	0xed, 0x05, 0xbf, 0x2d, 0xda, 0x83, 0x09, 0x7e, 0x5a, 0x0e, 0x1a, 0xca, 0x7d, 0x89, 0xa9, 0x8c,
	0x60, 0x58, 0xb8, 0x0a, 0xa6, 0xf1, 0x0f, 0x72, 0xe1, 0xca, 0x9f, 0xc5, 0x72, 0x84, 0xf6, 0x52,
	0x16, 0xf4, 0x85, 0xc4, 0xd6, 0x8c, 0x86, 0x71, 0x74, 0x08, 0xd3, 0x7e, 0x24, 0xe6, 0x7e, 0xad,
	0x3c, 0x90, 0xd0, 0x13, 0x71, 0x18, 0x65, 0x93, 0xdd, 0xb8, 0x7e, 0xa8, 0xb5, 0xce, 0x1c, 0x9b,
	0xa6, 0x36, 0xe8, 0x20, 0xbf, 0x94, 0xe1, 0x40, 0x42, 0x38, 0xd3, 0xc5, 0x3e, 0xf5, 0x8d, 0x12,
	0xa0, 0x0d, 0x89, 0x13, 0x56, 0x80, 0x25, 0x56, 0x9f, 0xc2, 0xb0, 0xda, 0x68, 0x58, 0xd8, 0xb6,
	0x95, 0x4d, 0x89, 0x69, 0xf4, 0x1b, 0xa3, 0xc7, 0x30, 0xa4, 0x79, 0xe7, 0xd4, 0xc3, 0xec, 0x87,
	0x5f, 0xd5, 0x1a, 0x7e, 0x6e, 0x46, 0x20, 0x1b, 0x95, 0x47, 0x99, 0xce, 0x16, 0xe2, 0xd0, 0x11,
	0xcc, 0xc6, 0x56, 0x01, 0xed, 0xd2, 0x63, 0xe9, 0x64, 0x4f, 0x17, 0x48, 0x3a, 0x18, 0xc9, 0xf6,
	0x7d, 0x95, 0x33, 0xdb, 0xf7, 0x02, 0x46, 0xd9, 0x26, 0xa1, 0xbd, 0xd8, 0x92, 0x58, 0xd3, 0xac,
	0x3d, 0x79, 0xf8, 0x31, 0xcc, 0x84, 0xf6, 0x48, 0x5b, 0x6d, 0xe1, 0x2a, 0xd6, 0x95, 0x27, 0x12,
	0xd3, 0x22, 0x44, 0x26, 0xe9, 0x0f, 0xd7, 0x31, 0x69, 0xff, 0x9e, 0xe6, 0xa1, 0xe4, 0x21, 0x38,
	0xe9, 0xee, 0x21, 0xa0, 0x48, 0x74, 0xae, 0xa8, 0x9f, 0x95, 0x67, 0x12, 0x9d, 0x15, 0xe0, 0xd0,
	0x16, 0x0c, 0x33, 0x36, 0xa2, 0x3c, 0xcf, 0xce, 0x38, 0xb2, 0xa6, 0xe8, 0x1d, 0x4c, 0x0b, 0x96,
	0xb5, 0xf2, 0x47, 0x89, 0xe9, 0x17, 0xe0, 0x38, 0x7f, 0x45, 0x65, 0x22, 0xf5, 0xd7, 0xd7, 0xd2,
	0xfe, 0x8a, 0xc2, 0x3d, 0x7d, 0x54, 0x12, 0x13, 0x64, 0x2a, 0x61, 0xbf, 0x91, 0xf0, 0xdb, 0x82,
	0x90, 0x24, 0x53, 0x15, 0xfb, 0x1c, 0x46, 0x6c, 0xb7, 0x46, 0x26, 0x48, 0x57, 0x5e, 0xc8, 0x24,
	0x10, 0xfc, 0xd6, 0x68, 0x07, 0x26, 0xc2, 0x4c, 0x54, 0xf9, 0x36, 0xd3, 0xff, 0x11, 0x04, 0x72,
	0x61, 0x5d, 0xe6, 0xdc, 0xa2, 0x4e, 0x7c, 0x99, 0xed, 0xc4, 0xbb, 0x12, 0x87, 0x57, 0x28, 0x51,
	0x18, 0x7b, 0xac, 0xf2, 0x2a, 0x8f, 0x8e, 0x0d, 0x41, 0x51, 0x15, 0xe6, 0xc4, 0x5a, 0x51, 0xd9,
	0x96, 0x30, 0x2a, 0x86, 0xa2, 0x63, 0x98, 0xf5, 0x7d, 0x46, 0x56, 0xbd, 0x6b, 0x57, 0xf0, 0x5f,
	0x5c, 0x6c, 0x3b, 0xca, 0xeb, 0x4c, 0x67, 0x8b, 0x81, 0x7c, 0xfe, 0xae, 0xcc, 0x65, 0x6d, 0xa9,
	0x8f, 0x77, 0x72, 0xe4, 0xef, 0x78, 0xb0, 0xef, 0xd4, 0xf8, 0xc1, 0x46, 0xcd, 0xee, 0xca, 0x38,
	0x35, 0x8e, 0x25, 0x56, 0xeb, 0xb0, 0x92, 0x92, 0x09, 0xa1, 0xd6, 0xf7, 0xb2, 0xad, 0xdf, 0x48,
	0x4e, 0x87, 0x30, 0x56, 0x1c, 0x4a, 0x3c, 0x7f, 0x97, 0x33, 0xf1, 0xfc, 0x8c, 0xcb, 0xd5, 0xbe,
	0x91, 0xc8, 0xa8, 0xf8, 0x8d, 0xf9, 0x73, 0x8d, 0x77, 0xa7, 0xb2, 0x2f, 0x7f, 0xae, 0xf1, 0x38,
	0xb2, 0x27, 0x23, 0xb4, 0xb2, 0x9c, 0xbd, 0x27, 0x23, 0x5c, 0xf2, 0x27, 0x58, 0x10, 0x2e, 0x1c,
	0xea, 0x99, 0x83, 0xec, 0xd1, 0x29, 0x42, 0x34, 0x71, 0xd3, 0x16, 0x0c, 0x33, 0xd9, 0xa9, 0xbc,
	0xcd, 0x0e, 0xd5, 0xac, 0x29, 0x57, 0x97, 0xe1, 0x56, 0x95, 0xab, 0x29, 0xdf, 0xcb, 0x1c, 0x18,
	0xd1, 0x79, 0x3f, 0xd5, 0xd0, 0x36, 0x8c, 0x87, 0x64, 0x96, 0x72, 0x98, 0xd9, 0x97, 0x30, 0x00,
	0x55, 0x60, 0x4e, 0x4c, 0xb6, 0x94, 0x77, 0x12, 0xe9, 0x00, 0x21, 0x32, 0x9c, 0xfd, 0x2e, 0xc7,
	0x33, 0x17, 0xef, 0xb3, 0x1d, 0xdf, 0xcd, 0xf9, 0x95, 0x63, 0x29, 0x8c, 0x34, 0xe9, 0x4b, 0x98,
	0x11, 0x7d, 0xc6, 0x51, 0x0f, 0xd2, 0x97, 0x18, 0xf1, 0x92, 0xad, 0x4a, 0xd2, 0x38, 0x94, 0xe3,
	0x4c, 0xef, 0xcc, 0x27, 0x0c, 0x41, 0xe6, 0xa0, 0x08, 0x86, 0xf1, 0x43, 0xef, 0x07, 0x85, 0x3f,
	0x1a, 0xbe, 0x92, 0x55, 0xc9, 0x51, 0xc9, 0x4a, 0xcb, 0x0c, 0x52, 0x7d, 0x5c, 0x2d, 0x9e, 0x19,
	0xa4, 0xc2, 0x78, 0x1f, 0x26, 0xa3, 0xf2, 0x5e, 0x39, 0x91, 0x50, 0x31, 0x51, 0x10, 0x2b, 0x0d,
	0x9f, 0xca, 0x95, 0x86, 0xd3, 0x86, 0x45, 0xf5, 0xe5, 0x87, 0xe2, 0xc3, 0x0a, 0x92, 0x62, 0xa1,
	0x84, 0x27, 0x75, 0xd6, 0x8f, 0x79, 0x13, 0x9e, 0xd4, 0x45, 0xdb, 0x30, 0xd6, 0xa0, 0x77, 0x1b,
	0x4e, 0x2e, 0x3a, 0x44, 0x6b, 0xfe, 0x24, 0x11, 0x2f, 0x42, 0x08, 0x12, 0x4d, 0xbb, 0xd9, 0x23,
	0xba, 0xb4, 0x7e, 0xce, 0xee, 0xc9, 0x78, 0x17, 0x42, 0x56, 0xd0, 0x1b, 0x98, 0x8c, 0x16, 0xd1,
	0x94, 0x8f, 0xd9, 0x55, 0x96, 0x28, 0x26, 0x75, 0x03, 0x07, 0x14, 0xe9, 0x97, 0x1e, 0x36, 0xb0,
	0xcf, 0x8d, 0x5e, 0xc2, 0x98, 0x7f, 0x3c, 0x51, 0x9b, 0x7f, 0x92, 0x38, 0x0b, 0x7d, 0x00, 0xc1,
	0x73, 0xc7, 0x47, 0xec, 0x29, 0xca, 0xaf, 0x12, 0x49, 0x8e, 0x24, 0x70, 0x24, 0xb4, 0x04, 0xa5,
	0x38, 0xda, 0xcb, 0xdf, 0xf2, 0xd0, 0xb6, 0x2e, 0xd6, 0x1b, 0xf0, 0x68, 0x03, 0xdb, 0x75, 0x4b,
	0xeb, 0x90, 0x27, 0x29, 0x9f, 0x64, 0x6e, 0xac, 0x70, 0x80, 0x6e, 0x05, 0x4b, 0x44, 0xcf, 0x69,
	0xe7, 0x7e, 0x97, 0xad, 0x60, 0x89, 0x18, 0x3a, 0xe9, 0xe2, 0xef, 0x70, 0x23, 0xd1, 0x2d, 0xf4,
	0x09, 0xaa, 0xcc, 0x13, 0x92, 0x2c, 0x90, 0x27, 0x48, 0xc4, 0xd7, 0x20, 0x43, 0x5a, 0xeb, 0x3d,
	0xbe, 0xfa, 0x89, 0x52, 0xfe, 0x8a, 0x43, 0x3d, 0xc7, 0x15, 0x87, 0xe8, 0x15, 0x85, 0x46, 0xde,
	0x2b, 0x0a, 0x4f, 0xa8, 0x6a, 0xa4, 0x6b, 0x12, 0x4b, 0x64, 0xb0, 0x58, 0xdb, 0x70, 0x11, 0xb9,
	0x5b, 0xc5, 0x52, 0x9a, 0x39, 0x8a, 0xc8, 0x5d, 0x58, 0xe2, 0x95, 0x93, 0x56, 0xc1, 0x2b, 0x27,
	0xd1, 0xb4, 0x46, 0xb0, 0x3d, 0xce, 0x72, 0xa6, 0x35, 0xfc, 0xbd, 0xf1, 0x18, 0xae, 0xb6, 0xa9,
	0x34, 0xd4, 0x24, 0x76, 0x85, 0xd7, 0x74, 0xf5, 0xdf, 0xb3, 0x80, 0x76, 0x34, 0x43, 0xb5, 0x2e,
	0xaa, 0x9f, 0x35, 0xa7, 0x7e, 0xc6, 0xae, 0x21, 0xf0, 0x42, 0x73, 0x20, 0x97, 0xd0, 0xe4, 0x6b,
	0xdc, 0x97, 0x73, 0xd5, 0xb8, 0xc3, 0xc5, 0x82, 0x2b, 0xb9, 0x8a, 0x05, 0x3f, 0xc1, 0x82, 0x77,
	0x58, 0xee, 0x06, 0xbf, 0xeb, 0xa6, 0xcd, 0x24, 0xae, 0x52, 0x29, 0x42, 0x34, 0x71, 0x6a, 0xf1,
	0xab, 0x03, 0x49, 0xd5, 0x80, 0xa1, 0x82, 0xd5, 0x00, 0xf1, 0x55, 0x84, 0xe1, 0x62, 0x57, 0x11,
	0x44, 0x94, 0x64, 0xa4, 0x38, 0x25, 0xb9, 0x26, 0x47, 0x49, 0x22, 0x77, 0xbe, 0x20, 0xdf, 0x9d,
	0xaf, 0x78, 0x0e, 0x63, 0x34, 0x77, 0x0e, 0x23, 0x7c, 0xff, 0x61, 0x2c, 0xe7, 0xfd, 0x87, 0x98,
	0x1a, 0x19, 0xcf, 0xab, 0x46, 0xe2, 0x2c, 0x65, 0x22, 0x37, 0x4b, 0x49, 0x56, 0x34, 0xd7, 0x0b,
	0x2b, 0x1a, 0x61, 0xed, 0x66, 0xb2, 0x58, 0xed, 0x86, 0x2b, 0x38, 0x4c, 0xf5, 0x54, 0x70, 0x40,
	0x05, 0x0a, 0x0e, 0xa2, 0xdb, 0x89, 0xd3, 0xf9, 0x6f, 0x27, 0x26, 0x66, 0x72, 0x66, 0x8a, 0x66,
	0x72, 0xa2, 0x54, 0x6d, 0x36, 0x27, 0x55, 0x13, 0x96, 0x29, 0xe7, 0x8a, 0x94, 0x29, 0x23, 0x1c,
	0x6a, 0x3e, 0x2f, 0x87, 0xe2, 0xae, 0x8d, 0x2a, 0xf2, 0xd7, 0x46, 0xd3, 0x6b, 0x26, 0x0b, 0x3d,
	0xd5, 0x4c, 0xb8, 0xea, 0x46, 0x29, 0x4f, 0x75, 0x83, 0x4f, 0x05, 0x2d, 0xe6, 0x49, 0x05, 0x75,
	0xcb, 0x22, 0x4b, 0xd2, 0x65, 0x91, 0x1f, 0x60, 0x56, 0x78, 0xca, 0xc8, 0x5c, 0x77, 0x14, 0x23,
	0x83, 0xfb, 0x1b, 0xcb, 0xd2, 0xf7, 0x37, 0x52, 0xf3, 0x45, 0x2b, 0xbd, 0xe4, 0x8b, 0x22, 0x45,
	0x95, 0x9b, 0x39, 0x8b, 0x2a, 0x01, 0x59, 0xeb, 0xee, 0x5b, 0xd9, 0x9a, 0x37, 0x8a, 0x6c, 0x5e,
	0x76, 0x4d, 0x82, 0xaf, 0xd1, 0xac, 0xe6, 0xab, 0xd1, 0x70, 0xb9, 0xaf, 0xdb, 0xf2, 0xb9, 0x2f,
	0xf1, 0x25, 0x91, 0x3b, 0x85, 0x2e, 0x89, 0x44, 0xf5, 0xf0, 0x5a, 0x6e, 0x3d, 0x1c, 0xb9, 0x66,
	0x72, 0x37, 0xdf, 0x35, 0x93, 0xa4, 0x2a, 0xd5, 0xbd, 0xc2, 0x55, 0x2a, 0x71, 0x21, 0x69, 0xbd,
	0x60, 0x21, 0x29, 0xe0, 0xba, 0xf7, 0xe5, 0xb9, 0xee, 0xbf, 0x4a, 0x30, 0x51, 0xc5, 0x75, 0xd7,
	0xd2, 0x9c, 0x8b, 0xff, 0x23, 0xcf, 0x7d, 0xef, 0xf3, 0xfe, 0xda, 0x45, 0x47, 0xb5, 0xed, 0x4f,
	0x86, 0xe9, 0xfd, 0x43, 0x82, 0xf2, 0x7a, 0xb4, 0x7f, 0x87, 0x36, 0x7f, 0xcf, 0x60, 0x11, 0xde,
	0x3c, 0x98, 0x8b, 0x37, 0x97, 0x83, 0x14, 0x0e, 0xfd, 0x6f, 0x5d, 0x37, 0x6d, 0xdc, 0x48, 0x7c,
	0x9d, 0x23, 0x7a, 0xb1, 0x94, 0x4e, 0xc8, 0x2e, 0xc5, 0x90, 0xed, 0xcf, 0x59, 0x62, 0x24, 0x37,
	0x83, 0x59, 0x75, 0x8d, 0xa0, 0x8a, 0x5f, 0xe4, 0x61, 0xea, 0xdc, 0xd2, 0x3a, 0x1d, 0xb6, 0x72,
	0x25, 0x18, 0xee, 0x4c, 0xd7, 0xd2, 0x89, 0x87, 0x8c, 0x52, 0xf7, 0x91, 0xbe, 0x50, 0xf7, 0x6b,
	0x7d, 0xa5, 0xee, 0xd0, 0x3f, 0xea, 0x3e, 0x5a, 0x9c, 0xba, 0x8f, 0xc9, 0x51, 0xf7, 0x0f, 0xb0,
	0x20, 0x5c, 0xb5, 0xb2, 0x2f, 0x6f, 0xcc, 0x09, 0x96, 0xae, 0x98, 0xd4, 0x4f, 0xf4, 0x48, 0xea,
	0xaf, 0xe7, 0x24, 0xf5, 0x87, 0xfe, 0xc9, 0xc3, 0xce, 0x9f, 0x0e, 0x36, 0x64, 0xaf, 0xb2, 0x4e,
	0x75, 0xd7, 0xdd, 0x51, 0x07, 0x1b, 0x5e, 0xe0, 0x8e, 0x48, 0x84, 0xa9, 0xde, 0x25, 0x02, 0xea,
	0xa3, 0x44, 0x98, 0xee, 0xaf, 0x44, 0x98, 0x29, 0x26, 0x11, 0xe2, 0x5c, 0x7f, 0xb6, 0x00, 0xd7,
	0x27, 0xa3, 0xa4, 0x73, 0x76, 0xd8, 0x25, 0x12, 0x27, 0x5a, 0x1b, 0x5b, 0x32, 0xbc, 0xd8, 0x0b,
	0xc2, 0x51, 0x24, 0x7a, 0x0b, 0xd3, 0x82, 0x40, 0x24, 0xf1, 0x4a, 0xcf, 0x54, 0x2c, 0x06, 0x25,
	0x8b, 0x08, 0xa5, 0x5f, 0x22, 0x62, 0xa1, 0x1f, 0x22, 0xa2, 0xd4, 0x07, 0x11, 0xb1, 0x98, 0x57,
	0x44, 0x44, 0xe3, 0x89, 0xf7, 0x3f, 0x2c, 0x4d, 0xaa, 0xf9, 0x78, 0xb2, 0xc3, 0xb0, 0xa4, 0x5f,
	0x7b, 0xbe, 0xfe, 0xeb, 0xee, 0x66, 0x89, 0x8b, 0xa7, 0x13, 0xe1, 0x8d, 0x8c, 0xaa, 0x82, 0x95,
	0x55, 0x3d, 0x33, 0x2d, 0x47, 0x8a, 0x6a, 0xc7, 0x96, 0x16, 0x85, 0x66, 0x28, 0xa0, 0x95, 0x7e,
	0x29, 0xa0, 0x9b, 0x45, 0x15, 0xd0, 0xad, 0x62, 0x0a, 0x68, 0x55, 0x5a, 0x01, 0x05, 0x77, 0x2a,
	0xa3, 0xbb, 0x8e, 0xda, 0xb9, 0x2d, 0xa3, 0x3e, 0x44, 0x7b, 0xd6, 0xe3, 0xab, 0x73, 0x71, 0x22,
	0x23, 0xcb, 0xbf, 0xa7, 0xa3, 0x6c, 0x86, 0xbf, 0x1b, 0xbf, 0xd6, 0x1f, 0x6d, 0x75, 0xb7, 0x8f,
	0xda, 0xea, 0x5e, 0x4e, 0x6d, 0x15, 0x65, 0x9c, 0xfe, 0x5e, 0x63, 0xec, 0x5b, 0x96, 0x71, 0xfa,
	0xdb, 0x8c, 0x97, 0x47, 0xf7, 0xe5, 0xe5, 0xd1, 0x2b, 0x18, 0xe3, 0x7b, 0xc1, 0xee, 0x82, 0x66,
	0x84, 0x0c, 0xee, 0xf1, 0x09, 0xfa, 0xea, 0x8b, 0xbe, 0xe8, 0xab, 0x07, 0xbd, 0xea, 0xab, 0x2f,
	0xfb, 0xa3, 0xaf, 0x36, 0xfa, 0xac, 0xaf, 0x36, 0x7b, 0xd5, 0x57, 0x0f, 0xe5, 0xf5, 0xd5, 0x3f,
	0xd7, 0x00, 0xed, 0x69, 0xed, 0x36, 0xb6, 0xfa, 0x54, 0x4b, 0xe8, 0xc0, 0x9a, 0x3f, 0x73, 0x95,
	0xfd, 0x1d, 0xd5, 0x68, 0xfc, 0x78, 0xa6, 0x39, 0xb8, 0xaa, 0xb5, 0x5d, 0xdd, 0x51, 0x0d, 0x6c,
	0xba, 0xb6, 0x7e, 0x21, 0xfb, 0x26, 0xe3, 0x9d, 0x4c, 0x4b, 0xbe, 0x64, 0xf0, 0x55, 0xdd, 0x95,
	0x5c, 0xaa, 0xee, 0x18, 0x66, 0x1b, 0xb8, 0xa9, 0xba, 0xba, 0xb3, 0x13, 0xbc, 0x60, 0x2d, 0x5b,
	0x7d, 0x98, 0x89, 0x21, 0x49, 0x5f, 0xc2, 0xba, 0xee, 0x6a, 0x2e, 0x5d, 0xc7, 0x1d, 0x07, 0x43,
	0x79, 0x8e, 0x83, 0xd4, 0x3a, 0xca, 0x70, 0xbf, 0xea, 0x28, 0xf9, 0xc4, 0x98, 0x90, 0xb3, 0x5c,
	0xeb, 0xe7, 0xfb, 0x19, 0x50, 0x50, 0xd6, 0x25, 0xe5, 0xac, 0x46, 0x8b, 0xe5, 0xac, 0xc4, 0x2a,
	0x71, 0xac, 0x98, 0x4a, 0x8c, 0x24, 0xc0, 0xc6, 0xf3, 0x25, 0xc0, 0x44, 0x1a, 0x73, 0xa2, 0x88,
	0xc6, 0xe4, 0xee, 0x2f, 0xd2, 0x2d, 0xc7, 0x15, 0xcd, 0x25, 0xaa, 0x15, 0x89, 0x58, 0x9e, 0x4b,
	0x9d, 0x7c, 0x36, 0xe9, 0x9f, 0x0f, 0xf1, 0x39, 0xd6, 0x6d, 0xf9, 0xb7, 0x10, 0x85, 0x70, 0x32,
	0x78, 0xa1, 0xd0, 0x99, 0x2a, 0x26, 0x74, 0x22, 0x15, 0x2f, 0xd4, 0x6b, 0xc5, 0x6b, 0xba, 0x47,
	0x71, 0x3c, 0x93, 0x53, 0x1c, 0x97, 0x61, 0xaa, 0x7b, 0x27, 0x5f, 0x37, 0x2d, 0xd9, 0xd2, 0xc5,
	0x64, 0x08, 0x25, 0x14, 0xc6, 0x73, 0xbd, 0x0b, 0xe3, 0xf9, 0xdc, 0xc2, 0xf8, 0x38, 0xa0, 0x42,
	0x41, 0xac, 0xa5, 0x13, 0x2f, 0xf3, 0xdd, 0x05, 0x6f, 0xb3, 0xef, 0x84, 0x81, 0x29, 0x52, 0x7b,
	0xa1, 0xb0, 0xd4, 0xf6, 0x32, 0x33, 0x25, 0xb9, 0xcc, 0xcc, 0x36, 0x8c, 0x87, 0xb6, 0x09, 0xd3,
	0x62, 0xa9, 0x8e, 0x0d, 0x01, 0xd0, 0x8f, 0x81, 0x16, 0x0b, 0x8f, 0x4d, 0x56, 0x8b, 0xcd, 0x8b,
	0x1c, 0x43, 0xbc, 0xcd, 0x55, 0x02, 0x6f, 0xf4, 0x54, 0x09, 0x5c, 0xee, 0x53, 0x25, 0x70, 0x25,
	0x7f, 0x25, 0x90, 0x73, 0x2f, 0x5d, 0xcb, 0x4c, 0x5f, 0x49, 0xb9, 0x97, 0x02, 0xc8, 0xba, 0xad,
	0x85, 0x39, 0x81, 0x84, 0xd2, 0x1a, 0xaf, 0x85, 0xc8, 0xc0, 0x19, 0xdc, 0xca, 0x24, 0x30, 0x12,
	0xef, 0xf1, 0x65, 0x1b, 0x21, 0x3b, 0xde, 0x34, 0xbc, 0xb9, 0xc4, 0x86, 0x7d, 0x62, 0x12, 0xb5,
	0x25, 0x51, 0x05, 0x89, 0x83, 0xa2, 0x29, 0x82, 0x3b, 0x79, 0x53, 0x04, 0x5d, 0x89, 0xb9, 0x26,
	0x2d, 0x31, 0xb9, 0xda, 0xe4, 0xdd, 0x5c, 0xb5, 0xc9, 0x50, 0xf7, 0xf7, 0x3c, 0x3e, 0x76, 0x62,
	0xb6, 0x5a, 0x3a, 0x96, 0x78, 0x0f, 0x2f, 0x05, 0x9d, 0xa1, 0xfa, 0xd7, 0x7b, 0x52, 0xfd, 0x7b,
	0x70, 0x9d, 0x9b, 0x50, 0x6a, 0xf0, 0x7e, 0xb6, 0xc1, 0x09, 0x0e, 0xc3, 0x6a, 0x65, 0xdc, 0x6f,
	0x98, 0x2e, 0x4b, 0x1b, 0x2e, 0xdf, 0x1c, 0x1d, 0xc0, 0x54, 0x8c, 0xbe, 0x4a, 0x89, 0xb2, 0x18,
	0x2a, 0x94, 0x8c, 0x78, 0x90, 0x27, 0x19, 0xc1, 0xc5, 0xe0, 0xf0, 0x71, 0xce, 0x64, 0x99, 0x54,
	0x0c, 0x0e, 0x23, 0xd1, 0x6f, 0xb0, 0x94, 0xc4, 0x3e, 0x64, 0x5f, 0xc6, 0x5b, 0x4c, 0x32, 0xe0,
	0xbf, 0xdb, 0xc8, 0xff, 0x99, 0x1a, 0xdd, 0xcc, 0x71, 0xb2, 0x52, 0x54, 0x6a, 0x61, 0xf9, 0x61,
	0xcf, 0x85, 0xe5, 0x47, 0xfd, 0x49, 0x7e, 0x3c, 0xee, 0x25, 0xf9, 0x11, 0xfe, 0xc4, 0xd5, 0x57,
	0xf9, 0x3e, 0x71, 0x75, 0x0e, 0xeb, 0xe2, 0xf9, 0x15, 0xa8, 0x48, 0x89, 0x17, 0xf9, 0xee, 0xc9,
	0x18, 0x23, 0x9d, 0xae, 0xc1, 0x72, 0x72, 0x4c, 0xa0, 0x4f, 0x7b, 0x22, 0xf1, 0x22, 0x4c, 0xb2,
	0x09, 0x41, 0x56, 0xe8, 0x69, 0xce, 0xac, 0x10, 0x97, 0xc5, 0x79, 0x26, 0x9f, 0xc5, 0x39, 0x86,
	0xd9, 0x58, 0xa4, 0xa7, 0xe3, 0x79, 0x2e, 0x41, 0xa0, 0x62, 0x48, 0x32, 0x0c, 0x03, 0xee, 0xc8,
	0x78, 0x95, 0xbd, 0xee, 0x97, 0xd6, 0x49, 0x29, 0x3b, 0xb1, 0x1c, 0xfa, 0xd7, 0x39, 0x73, 0xe8,
	0xe2, 0x34, 0xd4, 0x37, 0x7d, 0x49, 0x43, 0xbd, 0xe8, 0x35, 0x0d, 0xf5, 0x6d, 0x7f, 0xd2, 0x50,
	0x2f, 0xfb, 0x9c, 0x86, 0x7a, 0x55, 0x30, 0x0d, 0x95, 0x58, 0x41, 0xd9, 0x2e, 0x5a, 0x41, 0x09,
	0x12, 0x5b, 0xaf, 0xe5, 0x13, 0x5b, 0xff, 0x19, 0x80, 0xf1, 0x7d, 0x6c, 0x60, 0x4b, 0xf3, 0x3f,
	0xd3, 0x25, 0x96, 0xea, 0x03, 0xbd, 0x7c, 0xf0, 0xef, 0xb2, 0x1c, 0xdb, 0xf7, 0x23, 0xf3, 0x95,
	0xa2, 0xdf, 0x36, 0x1c, 0xcc, 0x17, 0x26, 0x56, 0xff, 0x7e, 0x05, 0x66, 0xbc, 0x2f, 0xaa, 0x9d,
	0x1a, 0x7f, 0x36, 0xcc, 0xcf, 0xc6, 0x3b, 0x6c, 0xdb, 0x6a, 0x0b, 0xf7, 0xed, 0xe3, 0x91, 0x97,
	0x73, 0x7e, 0x3c, 0x72, 0x30, 0xe3, 0xe3, 0x91, 0x5b, 0x30, 0x54, 0xa3, 0x37, 0x9a, 0x83, 0xeb,
	0xa1, 0xac, 0x65, 0xfc, 0x9e, 0x73, 0xf9, 0x52, 0x85, 0xb5, 0x25, 0xa8, 0x06, 0xcd, 0x5d, 0x06,
	0xdf, 0x32, 0x64, 0xa8, 0x78, 0x46, 0x93, 0xa0, 0xbc, 0xb6, 0x68, 0x1d, 0x06, 0xcf, 0xce, 0xd5,
	0x3a, 0x4b, 0xaf, 0x04, 0x7d, 0xea, 0x7e, 0xd0, 0xad, 0x7c, 0xa9, 0x42, 0x5b, 0xa0, 0x2d, 0x18,
	0xb1, 0xd9, 0xdd, 0x13, 0x96, 0x49, 0x99, 0xf3, 0x5b, 0x87, 0xef, 0xa4, 0x94, 0x2f, 0x55, 0x82,
	0x96, 0xe8, 0x11, 0x0c, 0xb7, 0xbc, 0x85, 0xc7, 0xb2, 0x25, 0xb3, 0x3e, 0x28, 0xb4, 0x1e, 0xcb,
	0x97, 0x2a, 0x7e, 0xbb, 0x9d, 0x11, 0xff, 0xdb, 0x99, 0xab, 0x4f, 0x61, 0xbc, 0xea, 0xd6, 0x08,
	0x9f, 0xae, 0xe1, 0xd7, 0x56, 0xcb, 0x46, 0x6b, 0x30, 0x41, 0x22, 0xa1, 0x56, 0x27, 0x31, 0x9b,
	0xec, 0x0d, 0x3a, 0x69, 0xe3, 0x95, 0xf1, 0xe0, 0xb7, 0xc7, 0xa6, 0xe5, 0x3c, 0xae, 0x00, 0x9c,
	0x58, 0xaa, 0x61, 0xeb, 0xaa, 0x63, 0x5a, 0x68, 0x0f, 0xae, 0x05, 0x56, 0x50, 0xf0, 0xf8, 0x90,
	0xe1, 0xd2, 0x52, 0x78, 0x32, 0xc2, 0x0b, 0x65, 0xf5, 0xd2, 0xc3, 0x81, 0x9d, 0x1d, 0x58, 0xb0,
	0xdb, 0xae, 0xd5, 0xd4, 0xb1, 0x6d, 0x6f, 0xd4, 0xcd, 0xf6, 0x66, 0xcb, 0xea, 0xd4, 0xd9, 0x77,
	0x52, 0x77, 0xd8, 0x17, 0xfb, 0xf6, 0xad, 0x4e, 0xfd, 0x63, 0x72, 0xb3, 0xda, 0x10, 0x5d, 0x1a,
	0x5f, 0xfd, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x46, 0x13, 0xc5, 0x79, 0x65, 0x55, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TranslatorClient is the client API for Translator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TranslatorClient interface {
	// Subscribe to ongoing message updates
	Subscribe(ctx context.Context, in *SubscribeArgs, opts ...grpc.CallOption) (Translator_SubscribeClient, error)
}

type translatorClient struct {
	cc grpc.ClientConnInterface
}

func NewTranslatorClient(cc grpc.ClientConnInterface) TranslatorClient {
	return &translatorClient{cc}
}

func (c *translatorClient) Subscribe(ctx context.Context, in *SubscribeArgs, opts ...grpc.CallOption) (Translator_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Translator_serviceDesc.Streams[0], "/indigo.Translator/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &translatorSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Translator_SubscribeClient interface {
	Recv() (*IndigoUnknownMessage, error)
	grpc.ClientStream
}

type translatorSubscribeClient struct {
	grpc.ClientStream
}

func (x *translatorSubscribeClient) Recv() (*IndigoUnknownMessage, error) {
	m := new(IndigoUnknownMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TranslatorServer is the server API for Translator service.
type TranslatorServer interface {
	// Subscribe to ongoing message updates
	Subscribe(*SubscribeArgs, Translator_SubscribeServer) error
}

// UnimplementedTranslatorServer can be embedded to have forward compatible implementations.
type UnimplementedTranslatorServer struct {
}

func (*UnimplementedTranslatorServer) Subscribe(req *SubscribeArgs, srv Translator_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

func RegisterTranslatorServer(s *grpc.Server, srv TranslatorServer) {
	s.RegisterService(&_Translator_serviceDesc, srv)
}

func _Translator_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeArgs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TranslatorServer).Subscribe(m, &translatorSubscribeServer{stream})
}

type Translator_SubscribeServer interface {
	Send(*IndigoUnknownMessage) error
	grpc.ServerStream
}

type translatorSubscribeServer struct {
	grpc.ServerStream
}

func (x *translatorSubscribeServer) Send(m *IndigoUnknownMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _Translator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "indigo.Translator",
	HandlerType: (*TranslatorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Translator_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/indigo.proto",
}
